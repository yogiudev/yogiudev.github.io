"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4830],{8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var r=t(6540);const i={},s=r.createContext(i);function a(e){const n=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),r.createElement(s.Provider,{value:n},e.children)}},8653:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>m,frontMatter:()=>a,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"SOLA/prompts/sla_query","title":"Generate Queries from Metadata","description":"You are a senior MongoDB architect and prompt\u2011engineer.","source":"@site/docs/SOLA/prompts/sla_query.md","sourceDirName":"SOLA/prompts","slug":"/SOLA/prompts/sla_query","permalink":"/docs/SOLA/prompts/sla_query","draft":false,"unlisted":false,"editUrl":"https://github.com/yogiudev/yogiudev.github.io/tree/main/docs/SOLA/prompts/sla_query.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"SLA Short Context","permalink":"/docs/SOLA/prompts/sla_optimized_meta"},"next":{"title":"Teams Collection Metadata","permalink":"/docs/SOLA/prompts/team_metadata"}}');var i=t(4848),s=t(8453);const a={},o="Generate Queries from Metadata",c={},d=[{value:"Context",id:"context",level:2},{value:"Task",id:"task",level:2},{value:"Requirements",id:"requirements",level:3},{value:"Output format",id:"output-format",level:3}];function l(e){const n={br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"generate-queries-from-metadata",children:"Generate Queries from Metadata"})}),"\n",(0,i.jsx)(n.p,{children:"You are a senior MongoDB architect and prompt\u2011engineer."}),"\n",(0,i.jsx)(n.h2,{id:"context",children:"Context"}),"\n",(0,i.jsx)(n.p,{children:"I have provided four MongoDB documents and their relationship notes:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"sla_profile"})," \u2013 definition of each SLA profile"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"metric"})," \u2013 definition of each SLA metric template"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"slm_metric_data"})," \u2013 run\u2011time SLA tracking record for a single ticket/change/etc."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"slm_metric_monitor_event"})," \u2013 fine\u2011grained event log of metric start/stop/pause/resume"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Those JSON docs are ",(0,i.jsx)(n.strong,{children:"exactly as pasted"})," below this message.",(0,i.jsx)(n.br,{}),"\n","Read them carefully; do not guess any additional fields."]}),"\n",(0,i.jsx)(n.h2,{id:"task",children:"Task"}),"\n",(0,i.jsxs)(n.p,{children:["Generate a ",(0,i.jsx)(n.strong,{children:"comprehensive list of useful analytics questions"})," that an ops engineer, SLA manager, or data analyst might ask about this data set.",(0,i.jsx)(n.br,{}),"\n","For every natural\u2011language question, write a matching MongoDB aggregation pipeline (version\u202f6.x syntax)."]}),"\n",(0,i.jsx)(n.h3,{id:"requirements",children:"Requirements"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Cover at least ",(0,i.jsx)(n.strong,{children:"20"})," distinct questions; aim for variety (breach analysis, MTTR, compliance %, trend over time, top violators, etc.)."]}),"\n",(0,i.jsxs)(n.li,{children:["Prefer ",(0,i.jsx)(n.code,{children:"$lookup"})," joins where cross\u2011collection data is required; minimise client\u2011side post\u2011processing."]}),"\n",(0,i.jsxs)(n.li,{children:["Use ",(0,i.jsx)(n.strong,{children:"stage comments"})," (",(0,i.jsx)(n.code,{children:"/* \u2026 */"}),") to explain logic inside each pipeline."]}),"\n",(0,i.jsxs)(n.li,{children:["Do ",(0,i.jsx)(n.strong,{children:"not"})," include any plain English outside the JSON payload described below."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"output-format",children:"Output format"}),"\n",(0,i.jsxs)(n.p,{children:["Return a ",(0,i.jsx)(n.strong,{children:"single JSON array"}),".",(0,i.jsx)(n.br,{}),"\n","Each element must have this shape:"]}),"\n",(0,i.jsx)(n.p,{children:"The filters should be dynamic using not all or them but module related"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsonc",children:'[ {\n  "nl_query": "What is the daily SLA performance trend for {{module_id}} from {{start_date}} to {{end_date}}?",\n  "description": "Show daily breach count and compliance percentage for a given module over a custom time period.",\n  "collection": "slm_metric_data",\n  "pipeline": [\n    {\n      "comment": "STEP 1: Filter for metrics in the provided date range and module_id if available.",\n      "stage": {\n        "$match": {\n          "is_deleted": false,\n          "metric_start_time": {\n            "$gte":  "{{start_date}}" ,\n            "$lte": "{{end_date}}" \n          },\n          "module_id": "{{module_id}}"\n        }\n      }\n    },\n    {\n      "comment": "STEP 2: Extract date part from metric_start_time.",\n      "stage": {\n        "$project": {\n          "date": {\n            "$dateToString": {\n              "format": "%Y-%m-%d",\n              "date": "$metric_start_time"\n            }\n          },\n          "is_breached": 1\n        }\n      }\n    },\n    {\n      "comment": "STEP 3: Group by date and count total vs breached.",\n      "stage": {\n        "$group": {\n          "_id": "$date",\n          "total_metrics": { "$sum": 1 },\n          "breached_count": {\n            "$sum": {\n              "$cond": [ "$is_breached", 1, 0 ]\n            }\n          }\n        }\n      }\n    },\n    {\n      "comment": "STEP 4: Calculate compliance percentage.",\n      "stage": {\n        "$project": {\n          "_id": 0,\n          "date": "$_id",\n          "total_metrics": 1,\n          "breached_count": 1,\n          "compliance_percentage": {\n            "$cond": [\n              { "$eq": [ "$total_metrics", 0 ] },\n              0,\n              {\n                "$multiply": [\n                  {\n                    "$divide": [\n                      { "$subtract": [ "$total_metrics", "$breached_count" ] },\n                      "$total_metrics"\n                    ]\n                  },\n                  100\n                ]\n              }\n            ]\n          }\n        }\n      }\n    },\n    {\n      "comment": "STEP 5: Sort by date ascending.",\n      "stage": {\n        "$sort": {\n          "date": 1\n        }\n      }\n    }\n  ]\n}]\n'})})]})}function m(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}}}]);