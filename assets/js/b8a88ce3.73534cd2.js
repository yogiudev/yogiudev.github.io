"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3177],{7579:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>r,contentTitle:()=>c,default:()=>m,frontMatter:()=>s,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"SOLA/prompts/change_query","title":"Generate Queries from Metadata","description":"You are a senior MongoDB architect and prompt\u2011engineer.","source":"@site/docs/SOLA/prompts/change_query.md","sourceDirName":"SOLA/prompts","slug":"/SOLA/prompts/change_query","permalink":"/docs/SOLA/prompts/change_query","draft":false,"unlisted":false,"editUrl":"https://github.com/yogiudev/yogiudev.github.io/tree/main/docs/SOLA/prompts/change_query.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Change Metadata","permalink":"/docs/SOLA/prompts/change_metadata"},"next":{"title":"The Complete Guide to Prompt Engineering for Developers","permalink":"/docs/SOLA/prompts/developer-prompt-guide"}}');var i=t(4848),o=t(8453);const s={},c="Generate Queries from Metadata",r={},l=[{value:"Context",id:"context",level:2},{value:"Task",id:"task",level:2},{value:"Requirements",id:"requirements",level:3},{value:"Output format",id:"output-format",level:3}];function d(n){const e={br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.header,{children:(0,i.jsx)(e.h1,{id:"generate-queries-from-metadata",children:"Generate Queries from Metadata"})}),"\n",(0,i.jsx)(e.p,{children:"You are a senior MongoDB architect and prompt\u2011engineer."}),"\n",(0,i.jsx)(e.h2,{id:"context",children:"Context"}),"\n",(0,i.jsx)(e.p,{children:"I have provided four MongoDB documents and their relationship notes:"}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"change"})," \u2013 definition of each change"]}),"\n"]}),"\n",(0,i.jsxs)(e.p,{children:["Those JSON docs are ",(0,i.jsx)(e.strong,{children:"exactly as pasted"})," below this message.",(0,i.jsx)(e.br,{}),"\n","Read them carefully; do not guess any additional fields."]}),"\n",(0,i.jsx)(e.h2,{id:"task",children:"Task"}),"\n",(0,i.jsxs)(e.p,{children:["Generate a ",(0,i.jsx)(e.strong,{children:"comprehensive list of useful analytics questions"})," that an Operation and Technician engineer, Change Manager, or data analyst might ask about incident and request.",(0,i.jsx)(e.br,{}),"\n","For every natural\u2011language question, write a matching MongoDB aggregation pipeline (version\u202f6.x syntax)."]}),"\n",(0,i.jsx)(e.h3,{id:"requirements",children:"Requirements"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["Cover at least ",(0,i.jsx)(e.strong,{children:"20"})," distinct questions; aim for variety (Search / Retrieval, Time-based Questions, Aggregation / Summary, Field Value Inspection, etc.)."]}),"\n",(0,i.jsxs)(e.li,{children:["Prefer ",(0,i.jsx)(e.code,{children:"$lookup"})," joins where cross\u2011collection data is required; minimise client\u2011side post\u2011processing."]}),"\n",(0,i.jsxs)(e.li,{children:["Use ",(0,i.jsx)(e.strong,{children:"stage comments"})," (",(0,i.jsx)(e.code,{children:"/* \u2026 */"}),") to explain logic inside each pipeline."]}),"\n",(0,i.jsxs)(e.li,{children:["Do ",(0,i.jsx)(e.strong,{children:"not"})," include any plain English outside the JSON payload described below."]}),"\n"]}),"\n",(0,i.jsx)(e.h3,{id:"output-format",children:"Output format"}),"\n",(0,i.jsxs)(e.p,{children:["Return a ",(0,i.jsx)(e.strong,{children:"single JSON array"}),".",(0,i.jsx)(e.br,{}),"\n","Each element must have this shape:"]}),"\n",(0,i.jsx)(e.p,{children:"The filters should be dynamic using not all or them but module related"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-json",children:'[\n  {\n    "nl_query": "What is the total number of changes created in the last 30 days",\n    "description": "Counts all changes created within the last 30 days.",\n    "collection": "change",\n    "pipeline": [\n      {\n        "comment": "STEP 1: Match changes for the organization created in last 30 days.",\n        "stage": {\n          "$match": {\n            "is_deleted": false,\n            "creation_time": {\n              "$gte": { "$dateSubtract": { "startDate": "{{dt_now}}", "unit": "day", "amount": 60 } }\n            }\n          }\n        }\n      },\n      {\n        "comment": "STEP 2: Count the documents.",\n        "stage": {\n          "$count": "total_changes"\n        }\n      }\n    ]\n  },\n  {\n    "nl_query": "What is the average lead time (in hours) for changes closed in the last 90 days",\n    "description": "Computes average of the existing lead_time field for closed changes in the last 90 days.",\n    "collection": "change",\n    "pipeline": [\n      {\n        "comment": "STEP 1: Match closed changes with closure time in last 90 days.",\n        "stage": {\n          "$match": {\n            "is_deleted": false,\n            "change_closure_time": {\n              "$gte": { "$dateSubtract": { "startDate": "{{dt_now}}", "unit": "day", "amount": 90 } }\n            },\n            "lead_time": { "$ne": null }\n          }\n        }\n      },\n      {\n        "comment": "STEP 2: Compute average lead time.",\n        "stage": {\n          "$group": {\n            "_id": null,\n            "avg_lead_time_hours": { "$avg": "$lead_time" }\n          }\n        }\n      }\n    ]\n  },\n  {\n    "nl_query": "How many changes are linked to a specific impacted service {{service}}?",\n    "description": "Counts changes where basic_info.impact_service equals the given service name.",\n    "collection": "change",\n    "pipeline": [\n      {\n        "comment": "STEP 1: Match changes for given impacted service.",\n        "stage": {\n          "$match": {\n            "is_deleted": false,\n            "basic_info.impact_servicename": "{{service}}"\n          }\n        }\n      },\n      {\n        "comment": "STEP 2: Count the matched changes.",\n        "stage": {\n          "$count": "changes_with_service"\n        }\n      }\n    ]\n  },\n  {\n    "nl_query": "What is the count of high-risk changes by month for the last 6 months?",\n    "description": "Groups changes marked as high-risk by month.",\n    "collection": "change",\n    "pipeline": [\n      {\n        "comment": "STEP 1: Match high-risk changes in last 6 months.",\n        "stage": {\n          "$match": {\n            "is_deleted": false,\n            "basic_info.risk.name": "High",\n            "creation_time": {\n              "$gte": { "$dateSubtract": { "startDate": "{{dt_now}}", "unit": "month", "amount": 6 } }\n            }\n          }\n        }\n      },\n      {\n        "comment": "STEP 2: Group by month and count.",\n        "stage": {\n          "$group": {\n            "_id": {\n              "year": { "$year": "$creation_time" },\n              "month": { "$month": "$creation_time" }\n            },\n            "count": { "$sum": 1 }\n          }\n        }\n      },\n      {\n        "comment": "STEP 3: Sort by date ascending.",\n        "stage": {\n          "$sort": { "_id.year": 1, "_id.month": 1 }\n        }\n      }\n    ]\n  },\n  {\n    "nl_query": "What percentage of changes closed before due date in the last quarter",\n    "description": "Computes SLA compliance for on-time closure.",\n    "collection": "change",\n    "pipeline": [\n      {\n        "comment": "STEP 1: Match closed changes in the last quarter.",\n        "stage": {\n          "$match": {\n            "is_deleted": false,\n            "change_closure_time": {\n              "$gte": { "$dateSubtract": { "startDate": "{{dt_now}}", "unit": "month", "amount": 3 } }\n            },\n            "due_date": { "$ne": null }\n          }\n        }\n      },\n      {\n        "comment": "STEP 2: Add field whether closed on time.",\n        "stage": {\n          "$addFields": {\n            "on_time": { "$cond": [{ "$lte": ["$change_closure_time", "$due_date"] }, 1, 0] }\n          }\n        }\n      },\n      {\n        "comment": "STEP 3: Group and calculate percentage.",\n        "stage": {\n          "$group": {\n            "_id": null,\n            "total": { "$sum": 1 },\n            "on_time_count": { "$sum": "$on_time" }\n          }\n        }\n      },\n      {\n        "comment": "STEP 4: Project compliance percentage.",\n        "stage": {\n          "$project": {\n            "_id": 0,\n            "compliance_percentage": {\n              "$multiply": [{ "$divide": ["$on_time_count", "$total"] }, 100]\n            }\n          }\n        }\n      }\n    ]\n  },\n  {\n    "nl_query": "Top 5 services with the most linked changes in the past year.",\n    "description": "Finds top impacted services from change data.",\n    "collection": "change",\n    "pipeline": [\n      {\n        "comment": "STEP 1: Match changes for last 12 months.",\n        "stage": {\n          "$match": {\n            "is_deleted": false,\n            "creation_time": {\n              "$gte": { "$dateSubtract": { "startDate": "{{dt_now}}", "unit": "year", "amount": 1 } }\n            },\n            "basic_info.impact_service": { "$exists": true, "$ne": null }\n          }\n        }\n      },\n      {\n        "comment": "STEP 2: Group by impact service and count.",\n        "stage": {\n          "$group": {\n            "_id": "$basic_info.impact_service",\n            "change_count": { "$sum": 1 }\n          }\n        }\n      },\n      {\n        "comment": "STEP 3: Sort by count desc and limit 5.",\n        "stage": {\n          "$sort": { "change_count": -1 }\n        }\n      },\n      {\n        "comment": "STEP 4: Join with impact_service collection to get names.",\n        "stage": {\n          "$lookup": {\n            "from": "impact_service",\n            "localField": "_id",\n            "foreignField": "service_id",\n            "as": "service_info"\n          }\n        }\n      },\n      {\n        "comment": "STEP 5: Project final output with service name.",\n        "stage": {\n          "$project": {\n            "service_id": "$_id",\n            "change_count": 1,\n            "service_name": { "$arrayElemAt": ["$service_info.name", 0] }\n          }\n        }\n      }\n    ]\n  },\n  {\n    "nl_query": "List all risks linked to high-priority changes in the past 3 months.",\n    "description": "Fetches changes with high priority and risk in the last 3 months.",\n    "collection": "change",\n    "pipeline": [\n      {\n        "comment": "STEP 1: Match changes with high priority and risk in last 3 months.",\n        "stage": {\n          "$match": {\n            "is_deleted": false,\n            "basic_info.priority": "High",\n            "basic_info.risk": { "$exists": true, "$ne": null },\n            "creation_time": {\n              "$gte": { "$dateSubtract": { "startDate": "{{dt_now}}", "unit": "month", "amount": 3 } }\n            }\n          }\n        }\n      },\n      {\n        "comment": "STEP 2: Project risk and change details.",\n        "stage": {\n          "$project": {\n            "_id": 0,\n            "change_id": 1,\n            "display_id": 1,\n            "risk": "$basic_info.risk",\n            "priority": "$basic_info.priority"\n          }\n        }\n      }\n    ]\n  },\n   {\n    "nl_query": "What is the distribution of changes by change type in the last 6 months?",\n    "description": "Groups changes by change_type to show the distribution of Emergency, Normal, Standard, and other types.",\n    "collection": "change",\n    "pipeline": [\n      {\n        "comment": "STEP 1: Match changes created in the last 6 months.",\n        "stage": {\n          "$match": {\n            "is_deleted": false,\n            "creation_time": {\n              "$gte": { "$dateSubtract": { "startDate": "{{dt_now}}", "unit": "month", "amount": 6 } }\n            }\n          }\n        }\n      },\n      {\n        "comment": "STEP 2: Group by change type and count.",\n        "stage": {\n          "$group": {\n            "_id": "$basic_info.change_type.name",\n            "count": { "$sum": 1 }\n          }\n        }\n      },\n      {\n        "comment": "STEP 3: Sort by count descending.",\n        "stage": {\n          "$sort": { "count": -1 }\n        }\n      }\n    ]\n  },\n  {\n    "nl_query": "Which change managers have the most assigned changes currently in progress?",\n    "description": "Finds change managers with the highest number of active in-progress changes.",\n    "collection": "change",\n    "pipeline": [\n      {\n        "comment": "STEP 1: Match changes currently in progress state.",\n        "stage": {\n          "$match": {\n            "is_deleted": false,\n            "basic_info.state.name": "In Progress"\n          }\n        }\n      },\n      {\n        "comment": "STEP 2: Group by change manager and count.",\n        "stage": {\n          "$group": {\n            "_id": {\n              "manager_id": "$change_manager.profile_id",\n              "manager_name": "$change_manager.full_name"\n            },\n            "active_changes": { "$sum": 1 }\n          }\n        }\n      },\n      {\n        "comment": "STEP 3: Sort by active changes descending.",\n        "stage": {\n          "$sort": { "active_changes": -1 }\n        }\n      },\n      {\n        "comment": "STEP 4: Project final output.",\n        "stage": {\n          "$project": {\n            "_id": 0,\n            "manager_id": "$_id.manager_id",\n            "manager_name": "$_id.manager_name",\n            "active_changes": 1\n          }\n        }\n      }\n    ]\n  },\n  {\n    "nl_query": "What is the average time between plan start date and actual start date for implemented changes?",\n    "description": "Calculates the variance between planned and actual start times for changes that have been implemented.",\n    "collection": "change",\n    "pipeline": [\n      {\n        "comment": "STEP 1: Match changes with both planned and actual start dates.",\n        "stage": {\n          "$match": {\n            "is_deleted": false,\n            "basic_info.plan_start_date": { "$ne": null },\n            "actual_start_date": { "$ne": null }\n          }\n        }\n      },\n      {\n        "comment": "STEP 2: Calculate time difference in hours.",\n        "stage": {\n          "$addFields": {\n            "variance_hours": {\n              "$divide": [\n                { "$subtract": ["$actual_start_date", "$basic_info.plan_start_date"] },\n                3600000\n              ]\n            }\n          }\n        }\n      },\n      {\n        "comment": "STEP 3: Group and calculate average variance.",\n        "stage": {\n          "$group": {\n            "_id": null,\n            "avg_variance_hours": { "$avg": "$variance_hours" },\n            "total_changes": { "$sum": 1 }\n          }\n        }\n      }\n    ]\n  },\n  {\n    "nl_query": "What are the top 5 locations with the most emergency changes in the last year?",\n    "description": "Identifies locations with highest emergency change volume for capacity planning.",\n    "collection": "change",\n    "pipeline": [\n      {\n        "comment": "STEP 1: Match emergency changes in the last year.",\n        "stage": {\n          "$match": {\n            "is_deleted": false,\n            "basic_info.change_type.name": "Emergency",\n            "creation_time": {\n              "$gte": { "$dateSubtract": { "startDate": "{{dt_now}}", "unit": "year", "amount": 1 } }\n            }\n          }\n        }\n      },\n      {\n        "comment": "STEP 2: Group by location and count.",\n        "stage": {\n          "$group": {\n            "_id": {\n              "location_id": "$location.location_id",\n              "location_name": "$location.location_name",\n              "city": "$location.city",\n              "state": "$location.state"\n            },\n            "emergency_count": { "$sum": 1 }\n          }\n        }\n      },\n      {\n        "comment": "STEP 3: Sort by count descending and limit to top 5.",\n        "stage": {\n          "$sort": { "emergency_count": -1 }\n        }\n      },\n      {\n        "comment": "STEP 4: Limit to top 5 locations.",\n        "stage": {\n          "$limit": 5\n        }\n      },\n      {\n        "comment": "STEP 5: Project final output.",\n        "stage": {\n          "$project": {\n            "_id": 0,\n            "location_id": "$_id.location_id",\n            "location_name": "$_id.location_name",\n            "city": "$_id.city",\n            "state": "$_id.state",\n            "emergency_count": 1\n          }\n        }\n      }\n    ]\n  },\n  {\n    "nl_query": "How many changes are currently assigned to each support group?",\n    "description": "Shows current workload distribution across different support groups.",\n    "collection": "change",\n    "pipeline": [\n      {\n        "comment": "STEP 1: Match active changes not in closed state.",\n        "stage": {\n          "$match": {\n            "is_deleted": false,\n            "basic_info.state.name": { "$nin": ["Closed", "Cancelled"] }\n          }\n        }\n      },\n      {\n        "comment": "STEP 2: Group by support group and count.",\n        "stage": {\n          "$group": {\n            "_id": {\n              "group_id": "$current_assignment_info.group",\n              "group_name": "$current_assignment_info.group_name",\n              "group_type": "$current_assignment_info.group_type"\n            },\n            "active_changes": { "$sum": 1 }\n          }\n        }\n      },\n      {\n        "comment": "STEP 3: Sort by active changes descending.",\n        "stage": {\n          "$sort": { "active_changes": -1 }\n        }\n      },\n      {\n        "comment": "STEP 4: Project final output.",\n        "stage": {\n          "$project": {\n            "_id": 0,\n            "group_id": "$_id.group_id",\n            "group_name": "$_id.group_name",\n            "group_type": "$_id.group_type",\n            "active_changes": 1\n          }\n        }\n      }\n    ]\n  },\n  {\n    "nl_query": "What is the monthly trend of changes by priority level for the last 12 months?",\n    "description": "Shows monthly trends of changes grouped by priority (High, Medium, Low) for trend analysis.",\n    "collection": "change",\n    "pipeline": [\n      {\n        "comment": "STEP 1: Match changes in the last 12 months.",\n        "stage": {\n          "$match": {\n            "is_deleted": false,\n            "creation_time": {\n              "$gte": { "$dateSubtract": { "startDate": "{{dt_now}}", "unit": "year", "amount": 1 } }\n            }\n          }\n        }\n      },\n      {\n        "comment": "STEP 2: Group by month and priority.",\n        "stage": {\n          "$group": {\n            "_id": {\n              "year": { "$year": "$creation_time" },\n              "month": { "$month": "$creation_time" },\n              "priority": "$basic_info.priority.name"\n            },\n            "count": { "$sum": 1 }\n          }\n        }\n      },\n      {\n        "comment": "STEP 3: Sort by date ascending.",\n        "stage": {\n          "$sort": { "_id.year": 1, "_id.month": 1, "_id.priority": 1 }\n        }\n      }\n    ]\n  },\n  {\n    "nl_query": "What is the average response time for changes by change source (Web, Email, etc.)?",\n    "description": "Computes average response time grouped by change source to identify efficiency by channel.",\n    "collection": "change",\n    "pipeline": [\n      {\n        "comment": "STEP 1: Match changes with response time and source.",\n        "stage": {\n          "$match": {\n            "is_deleted": false,\n            "change_response_time": { "$ne": null },\n            "creation_time": { "$ne": null }\n          }\n        }\n      },\n      {\n        "comment": "STEP 2: Calculate response time in hours.",\n        "stage": {\n          "$addFields": {\n            "response_time_hours": {\n              "$divide": [\n                { "$subtract": ["$change_response_time", "$creation_time"] },\n                3600000\n              ]\n            }\n          }\n        }\n      },\n      {\n        "comment": "STEP 3: Group by change source and calculate average.",\n        "stage": {\n          "$group": {\n            "_id": "$basic_info.change_source.name",\n            "avg_response_time_hours": { "$avg": "$response_time_hours" },\n            "total_changes": { "$sum": 1 }\n          }\n        }\n      },\n      {\n        "comment": "STEP 4: Sort by average response time.",\n        "stage": {\n          "$sort": { "avg_response_time_hours": 1 }\n        }\n      }\n    ]\n  },\n  {\n    "nl_query": "What is the average planning duration (plan_end_date - plan_start_date) by change type?",\n    "description": "Calculates average planned duration for changes grouped by change type for planning insights.",\n    "collection": "change",\n    "pipeline": [\n      {\n        "comment": "STEP 1: Match changes with both plan start and end dates.",\n        "stage": {\n          "$match": {\n            "is_deleted": false,\n            "basic_info.plan_start_date": { "$ne": null },\n            "basic_info.plan_end_date": { "$ne": null }\n          }\n        }\n      },\n      {\n        "comment": "STEP 2: Calculate planning duration in hours.",\n        "stage": {\n          "$addFields": {\n            "planning_duration_hours": {\n              "$divide": [\n                { "$subtract": ["$basic_info.plan_end_date", "$basic_info.plan_start_date"] },\n                3600000\n              ]\n            }\n          }\n        }\n      },\n      {\n        "comment": "STEP 3: Group by change type and calculate average.",\n        "stage": {\n          "$group": {\n            "_id": "$basic_info.change_type.name",\n            "avg_planning_duration_hours": { "$avg": "$planning_duration_hours" },\n            "total_changes": { "$sum": 1 }\n          }\n        }\n      },\n      {\n        "comment": "STEP 4: Sort by average duration descending.",\n        "stage": {\n          "$sort": { "avg_planning_duration_hours": -1 }\n        }\n      }\n    ]\n  },\n  {\n    "nl_query": "Find changes created by each requester in the last quarter and their current status.",\n    "description": "Shows change creation patterns by requester with status distribution for workload analysis.",\n    "collection": "change",\n    "pipeline": [\n      {\n        "comment": "STEP 1: Match changes from last quarter.",\n        "stage": {\n          "$match": {\n            "is_deleted": false,\n            "creation_time": {\n              "$gte": { "$dateSubtract": { "startDate": "{{dt_now}}", "unit": "month", "amount": 3 } }\n            }\n          }\n        }\n      },\n      {\n        "comment": "STEP 2: Group by requester and status.",\n        "stage": {\n          "$group": {\n            "_id": {\n              "requester_id": "$requester.requester_id",\n              "requester_name": "$requester.full_name",\n              "requester_email": "$requester.email",\n              "status": "$basic_info.state.name"\n            },\n            "count": { "$sum": 1 }\n          }\n        }\n      },\n      {\n        "comment": "STEP 3: Group by requester to get total and status breakdown.",\n        "stage": {\n          "$group": {\n            "_id": {\n              "requester_id": "$_id.requester_id",\n              "requester_name": "$_id.requester_name",\n              "requester_email": "$_id.requester_email"\n            },\n            "total_changes": { "$sum": "$count" },\n            "status_breakdown": {\n              "$push": {\n                "status": "$_id.status",\n                "count": "$count"\n              }\n            }\n          }\n        }\n      },\n      {\n        "comment": "STEP 4: Sort by total changes descending.",\n        "stage": {\n          "$sort": { "total_changes": -1 }\n        }\n      }\n    ]\n  },\n  {\n    "nl_query": "What are the most common planning descriptions used in changes?",\n    "description": "Analyzes planning field content to identify common patterns in change planning descriptions.",\n    "collection": "change",\n    "pipeline": [\n      {\n        "comment": "STEP 1: Match changes with planning descriptions.",\n        "stage": {\n          "$match": {\n            "is_deleted": false,\n            "basic_info.planning": { "$exists": true, "$ne": null, "$ne": "" }\n          }\n        }\n      },\n      {\n        "comment": "STEP 2: Extract text from HTML planning field.",\n        "stage": {\n          "$addFields": {\n            "planning_text": {\n              "$replaceAll": {\n                "input": {\n                  "$replaceAll": {\n                    "input": "$basic_info.planning",\n                    "find": "&lt;",\n                    "replacement": "<"\n                  }\n                },\n                "find": "&gt;",\n                "replacement": ">"\n              }\n            }\n          }\n        }\n      },\n      {\n        "comment": "STEP 3: Group by planning text and count.",\n        "stage": {\n          "$group": {\n            "_id": "$planning_text",\n            "usage_count": { "$sum": 1 }\n          }\n        }\n      },\n      {\n        "comment": "STEP 4: Sort by usage count descending.",\n        "stage": {\n          "$sort": { "usage_count": -1 }\n        }\n      },\n      {\n        "comment": "STEP 5: Limit to top 10 most common.",\n        "stage": {\n          "$limit": 10\n        }\n      }\n    ]\n  },\n  {\n    "nl_query": "Find changes that have followers (watchers) and count followers per change.",\n    "description": "Identifies changes with watchers to understand stakeholder engagement patterns.",\n    "collection": "change",\n    "pipeline": [\n      {\n        "comment": "STEP 1: Match changes with watchers.",\n        "stage": {\n          "$match": {\n            "is_deleted": false,\n            "current_watcher": { "$exists": true, "$ne": [] }\n          }\n        }\n      },\n      {\n        "comment": "STEP 2: Add watcher count field.",\n        "stage": {\n          "$addFields": {\n            "watcher_count": { "$size": "$current_watcher" }\n          }\n        }\n      },\n      {\n        "comment": "STEP 3: Project relevant fields.",\n        "stage": {\n          "$project": {\n            "_id": 0,\n            "change_id": 1,\n            "display_id": 1,\n            "basic_info.summary": 1,\n            "basic_info.state.name": 1,\n            "watcher_count": 1,\n            "watchers": "$current_watcher"\n          }\n        }\n      },\n      {\n        "comment": "STEP 4: Sort by watcher count descending.",\n        "stage": {\n          "$sort": { "watcher_count": -1 }\n        }\n      }\n    ]\n  },\n  {\n    "nl_query": "What is the distribution of changes by catalogue and category in the last year?",\n    "description": "Shows change distribution across service catalogues and categories for service analysis.",\n    "collection": "change",\n    "pipeline": [\n      {\n        "comment": "STEP 1: Match changes from last year.",\n        "stage": {\n          "$match": {\n            "is_deleted": false,\n            "creation_time": {\n              "$gte": { "$dateSubtract": { "startDate": "{{dt_now}}", "unit": "year", "amount": 1 } }\n            }\n          }\n        }\n      },\n      {\n        "comment": "STEP 2: Group by catalogue and category.",\n        "stage": {\n          "$group": {\n            "_id": {\n              "catalogue_name": "$basic_info.catalogue_name",\n              "category_name": "$basic_info.category_name"\n            },\n            "change_count": { "$sum": 1 }\n          }\n        }\n      },\n      {\n        "comment": "STEP 3: Sort by change count descending.",\n        "stage": {\n          "$sort": { "change_count": -1 }\n        }\n      },\n      {\n        "comment": "STEP 4: Project final output.",\n        "stage": {\n          "$project": {\n            "_id": 0,\n            "catalogue_name": "$_id.catalogue_name",\n            "category_name": "$_id.category_name",\n            "change_count": 1\n          }\n        }\n      }\n    ]\n  },\n  {\n    "nl_query": "Find changes that are overdue (past due_date) and still not closed.",\n    "description": "Identifies overdue changes for prioritization and escalation purposes.",\n    "collection": "change",\n    "pipeline": [\n      {\n        "comment": "STEP 1: Match changes that are overdue and not closed.",\n        "stage": {\n          "$match": {\n            "is_deleted": false,\n            "due_date": { "$ne": null, "$lt": "{{dt_now}}" },\n            "basic_info.state.name": { "$nin": ["Closed", "Cancelled"] }\n          }\n        }\n      },\n      {\n        "comment": "STEP 2: Calculate overdue hours.",\n        "stage": {\n          "$addFields": {\n            "overdue_hours": {\n              "$divide": [\n                { "$subtract": ["{{dt_now}}", "$due_date"] },\n                3600000\n              ]\n            }\n          }\n        }\n      },\n      {\n        "comment": "STEP 3: Project relevant fields.",\n        "stage": {\n          "$project": {\n            "_id": 0,\n            "change_id": 1,\n            "display_id": 1,\n            "basic_info.summary": 1,\n            "basic_info.state.name": 1,\n            "basic_info.priority.name": 1,\n            "current_assignment_info.group_name": 1,\n            "current_assignment_info.assignee_profile.full_name": 1,\n            "due_date": 1,\n            "overdue_hours": 1\n          }\n        }\n      },\n      {\n        "comment": "STEP 4: Sort by overdue hours descending.",\n        "stage": {\n          "$sort": { "overdue_hours": -1 }\n        }\n      }\n    ]\n  },\n  {\n    "nl_query": "What is the percentage of changes that have rollback plans documented?",\n    "description": "Calculates the percentage of changes with documented rollback plans for compliance tracking.",\n    "collection": "change",\n    "pipeline": [\n      {\n        "comment": "STEP 1: Match all changes in the specified period.",\n        "stage": {\n          "$match": {\n            "is_deleted": false,\n            "creation_time": {\n              "$gte": { "$dateSubtract": { "startDate": "{{dt_now}}", "unit": "month", "amount": 6 } }\n            }\n          }\n        }\n      },\n      {\n        "comment": "STEP 2: Add field indicating if rollback is documented.",\n        "stage": {\n          "$addFields": {\n            "has_rollback_plan": {\n              "$cond": [\n                { "$and": [\n                  { "$ne": ["$basic_info.rollback", null] },\n                  { "$ne": ["$basic_info.rollback", ""] },\n                  { "$ne": ["$basic_info.rollback", "&lt;p&gt;N/A&lt;/p&gt;"] }\n                ]},\n                1,\n                0\n              ]\n            }\n          }\n        }\n      },\n      {\n        "comment": "STEP 3: Group and calculate percentage.",\n        "stage": {\n          "$group": {\n            "_id": null,\n            "total_changes": { "$sum": 1 },\n            "with_rollback_plan": { "$sum": "$has_rollback_plan" }\n          }\n        }\n      },\n      {\n        "comment": "STEP 4: Calculate percentage.",\n        "stage": {\n          "$project": {\n            "_id": 0,\n            "total_changes": 1,\n            "with_rollback_plan": 1,\n            "rollback_compliance_percentage": {\n              "$multiply": [\n                { "$divide": ["$with_rollback_plan", "$total_changes"] },\n                100\n              ]\n            }\n          }\n        }\n      }\n    ]\n  }\n]\n'})})]})}function m(n={}){const{wrapper:e}={...(0,o.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(d,{...n})}):d(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>s,x:()=>c});var a=t(6540);const i={},o=a.createContext(i);function s(n){const e=a.useContext(o);return a.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function c(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:s(n.components),a.createElement(o.Provider,{value:e},n.children)}}}]);