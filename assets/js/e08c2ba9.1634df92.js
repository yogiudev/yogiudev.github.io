"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[17],{8250:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>r,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>m});const i=JSON.parse('{"id":"SOLA/prompts/inci_req_queries","title":"Generate Queries from Metadata","description":"You are a senior MongoDB architect and prompt\u2011engineer.","source":"@site/docs/SOLA/prompts/inci_req_queries.md","sourceDirName":"SOLA/prompts","slug":"/SOLA/prompts/inci_req_queries","permalink":"/docs/SOLA/prompts/inci_req_queries","draft":false,"unlisted":false,"editUrl":"https://github.com/yogiudev/yogiudev.github.io/tree/main/docs/SOLA/prompts/inci_req_queries.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Incident Metadata","permalink":"/docs/SOLA/prompts/inci_req_metadata"},"next":{"title":"nlp","permalink":"/docs/SOLA/prompts/nlp"}}');var a=t(4848),s=t(8453);const o={},r="Generate Queries from Metadata",c={},m=[{value:"Context",id:"context",level:2},{value:"Task",id:"task",level:2},{value:"Requirements",id:"requirements",level:3},{value:"Output format",id:"output-format",level:3}];function l(n){const e={br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.header,{children:(0,a.jsx)(e.h1,{id:"generate-queries-from-metadata",children:"Generate Queries from Metadata"})}),"\n",(0,a.jsx)(e.p,{children:"You are a senior MongoDB architect and prompt\u2011engineer."}),"\n",(0,a.jsx)(e.h2,{id:"context",children:"Context"}),"\n",(0,a.jsx)(e.p,{children:"I have provided four MongoDB documents and their relationship notes:"}),"\n",(0,a.jsxs)(e.ol,{children:["\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"incident"})," \u2013 definition of each incident"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"request_process"})," \u2013 definition of each request"]}),"\n"]}),"\n",(0,a.jsxs)(e.p,{children:["Those JSON docs are ",(0,a.jsx)(e.strong,{children:"exactly as pasted"})," below this message.",(0,a.jsx)(e.br,{}),"\n","Read them carefully; do not guess any additional fields."]}),"\n",(0,a.jsx)(e.h2,{id:"task",children:"Task"}),"\n",(0,a.jsxs)(e.p,{children:["Generate a ",(0,a.jsx)(e.strong,{children:"comprehensive list of useful analytics questions"})," that an operation and Technician engineer, or data analyst might ask about incident and request.",(0,a.jsx)(e.br,{}),"\n","For every natural\u2011language question, write a matching MongoDB aggregation pipeline (version\u202f6.x syntax)."]}),"\n",(0,a.jsx)(e.h3,{id:"requirements",children:"Requirements"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:["Cover at least ",(0,a.jsx)(e.strong,{children:"20"})," distinct questions; aim for variety (Search / Retrieval, Time-based Questions, Aggregation / Summary, Field Value Inspection, etc.)."]}),"\n",(0,a.jsxs)(e.li,{children:["Prefer ",(0,a.jsx)(e.code,{children:"$lookup"})," joins where cross\u2011collection data is required; minimise client\u2011side post\u2011processing."]}),"\n",(0,a.jsxs)(e.li,{children:["Use ",(0,a.jsx)(e.strong,{children:"stage comments"})," (",(0,a.jsx)(e.code,{children:"/* \u2026 */"}),") to explain logic inside each pipeline."]}),"\n",(0,a.jsxs)(e.li,{children:["Do ",(0,a.jsx)(e.strong,{children:"not"})," include any plain English outside the JSON payload described below."]}),"\n"]}),"\n",(0,a.jsx)(e.h3,{id:"output-format",children:"Output format"}),"\n",(0,a.jsxs)(e.p,{children:["Return a ",(0,a.jsx)(e.strong,{children:"single JSON array"}),".",(0,a.jsx)(e.br,{}),"\n","Each element must have this shape:"]}),"\n",(0,a.jsx)(e.p,{children:"The filters should be dynamic using not all or them but module related"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-json",children:'[\n  {\n    "nl_query": "How many incidents were created per day in the last 30 days?",\n    "description": "Count of incidents created per day in the last 30 days.",\n    "collection": "incident",\n    "pipeline": [\n      {\n        "comment": "STEP 1: Filter incidents created in the last 30 days.",\n        "stage": {\n          "$match": {\n            "is_deleted": false,\n            "creation_time": {\n              "$gte": {\n                "$dateSubtract": {\n                  "startDate": "{{dt_now}}",\n                  "unit": "day",\n                  "amount": 30\n                }\n              }\n            }\n          }\n        }\n      },\n      {\n        "comment": "STEP 2: Group by creation date (YYYY-MM-DD) and count.",\n        "stage": {\n          "$group": {\n            "_id": {\n              "$dateToString": { "format": "%Y-%m-%d", "date": "$creation_time" }\n            },\n            "count": { "$sum": 1 }\n          }\n        }\n      },\n      {\n        "comment": "STEP 3: Sort by date ascending.",\n        "stage": { "$sort": { "_id": 1 } }\n      }\n    ]\n  },\n  {\n    "nl_query": "Top 5 impacted services by ticket volume?",\n    "description": "Find the top 5 impacted services by number of incidents.",\n    "collection": "incident",\n    "pipeline": [\n      {\n        "comment": "STEP 1: Filter active incidents.",\n        "stage": { "$match": { "is_deleted": false } }\n      },\n      {\n        "comment": "STEP 2: Group by impact_service_name and count.",\n        "stage": {\n          "$group": {\n            "_id": "$basic_info.impact_service_name",\n            "count": { "$sum": 1 }\n          }\n        }\n      },\n      {\n        "comment": "STEP 3: Sort by count descending and limit to top 5.",\n        "stage": { "$sort": { "count": -1 } }\n      },\n      {\n        "comment": "STEP 4: Limit to top 5 services.",\n        "stage": { "$limit": 5 }\n      }\n    ]\n  },\n  {\n    "nl_query": "What is the weekly trend of incident creation vs resolution?",\n    "description": "Weekly counts of incident creation and resolution for the last 12 weeks.",\n    "collection": "incident",\n    "pipeline": [\n      {\n        "comment": "STEP 1: Filter incidents created or resolved in last 12 weeks.",\n        "stage": {\n          "$match": {\n            "is_deleted": false,\n            "$or": [\n              {\n                "creation_time": {\n                  "$gte": {\n                    "$dateSubtract": {\n                      "startDate": "{{dt_now}}",\n                      "unit": "week",\n                      "amount": 12\n                    }\n                  }\n                }\n              },\n              {\n                "inci_resolution_time": {\n                  "$gte": {\n                    "$dateSubtract": {\n                      "startDate": "{{dt_now}}",\n                      "unit": "week",\n                      "amount": 12\n                    }\n                  }\n                }\n              }\n            ]\n          }\n        }\n      },\n      {\n        "comment": "STEP 2: Project week for creation and resolution.",\n        "stage": {\n          "$project": {\n            "creation_week": {\n              "$dateToString": { "format": "%Y-%U", "date": "$creation_time" }\n            },\n            "resolution_week": {\n              "$cond": [\n                { "$ifNull": ["$inci_resolution_time", false] },\n                { "$dateToString": { "format": "%Y-%U", "date": "$inci_resolution_time" } },\n                null\n              ]\n            }\n          }\n        }\n      },\n      {\n        "comment": "STEP 3: Group by week and count creations and resolutions.",\n        "stage": {\n          "$group": {\n            "_id": "$creation_week",\n            "created_count": { "$sum": 1 },\n            "resolved_count": {\n              "$sum": {\n                "$cond": [\n                  { "$ifNull": ["$resolution_week", false] },\n                  1,\n                  0\n                ]\n              }\n            }\n          }\n        }\n      },\n      {\n        "comment": "STEP 4: Sort by week ascending.",\n        "stage": { "$sort": { "_id": 1 } }\n      }\n    ]\n  },\n  {\n    "nl_query": "What are the most common incident summaries/tags this quarter?",\n    "description": "Top incident summaries and tags for the current quarter.",\n    "collection": "incident",\n    "pipeline": [\n      {\n        "comment": "STEP 1: Filter incidents created in current quarter.",\n        "stage": {\n          "$match": {\n            "is_deleted": false,\n            "creation_time": {\n              "$gte": {\n                "$dateTrunc": {\n                  "date": "{{dt_now}}",\n                  "unit": "quarter"\n                }\n              }\n            }\n          }\n        }\n      },\n      {\n        "comment": "STEP 2: Group by summary and count.",\n        "stage": {\n          "$group": {\n            "_id": "$basic_info.summary",\n            "count": { "$sum": 1 }\n          }\n        }\n      },\n      {\n        "comment": "STEP 3: Sort by count descending.",\n        "stage": { "$sort": { "count": -1 } }\n      },\n      {\n        "comment": "STEP 4: Limit to top 10 summaries.",\n        "stage": { "$limit": 10 }\n      }\n    ]\n  },\n  {\n    "nl_query": "How many incidents are currently assigned to each engineer?",\n    "description": "Count of currently assigned incidents per engineer.",\n    "collection": "incident",\n    "pipeline": [\n      {\n        "comment": "STEP 1: Filter active incidents with assignee.",\n        "stage": {\n          "$match": {\n            "is_deleted": false,\n            "current_assignment_info.assignee_profile.full_name": { "$ne": null }\n          }\n        }\n      },\n      {\n        "comment": "STEP 2: Group by assignee full name and count.",\n        "stage": {\n          "$group": {\n            "_id": "$current_assignment_info.assignee_profile.full_name",\n            "assigned_count": { "$sum": 1 }\n          }\n        }\n      },\n      {\n        "comment": "STEP 3: Sort by count descending.",\n        "stage": { "$sort": { "assigned_count": -1 } }\n      }\n    ]\n  },\n  {\n    "nl_query": "How many tickets did {{created_by_name}} close this week?",\n    "description": "Count of tickets closed by {{created_by_name}} in the current week.",\n    "collection": "incident",\n    "pipeline": [\n      {\n        "comment": "STEP 1: Filter incidents closed by {{created_by_name}} in current week.",\n        "stage": {\n          "$match": {\n            "is_deleted": false,\n            "close_info.closed_by": "{{created_by_name}}",\n            "actual_closure_date": {\n              "$gte": {\n                "$dateTrunc": {\n                  "date": "{{dt_now}}",\n                  "unit": "week"\n                }\n              }\n            }\n          }\n        }\n      },\n      {\n        "comment": "STEP 2: Count the tickets.",\n        "stage": {\n          "$count": "closed_count"\n        }\n      }\n    ]\n  },\n  {\n    "nl_query": "Who has the highest number of overdue tickets?",\n    "description": "Find the user with the most overdue tickets (not closed past due date).",\n    "collection": "incident",\n    "pipeline": [\n      {\n        "comment": "STEP 1: Filter incidents past agreed_closure_date and not closed.",\n        "stage": {\n          "$match": {\n            "is_deleted": false,\n            "actual_closure_date": null,\n            "agreed_closure_date": { "$ne": null },\n            "agreed_closure_date": { "$lt": "{{dt_now}}" }\n          }\n        }\n      },\n      {\n        "comment": "STEP 2: Group by assignee and count.",\n        "stage": {\n          "$group": {\n            "_id": "$current_assignment_info.assignee_profile.full_name",\n            "overdue_count": { "$sum": 1 }\n          }\n        }\n      },\n      {\n        "comment": "STEP 3: Sort by overdue count descending.",\n        "stage": { "$sort": { "overdue_count": -1 } }\n      },\n      {\n        "comment": "STEP 4: Limit to top user.",\n        "stage": { "$limit": 1 }\n      }\n    ]\n  },\n{\n  "nl_query": "What\u2019s the average resolution time per group or user?",\n  "description": "Average resolution time (minutes) per group and assignee.",\n  "collection": "incident",\n  "pipeline": [\n    {\n      "comment": "STEP 1: Filter incidents with resolution time.",\n      "stage": {\n        "$match": {\n          "is_deleted": false,\n          "inci_resolution_time": { "$ne": null }\n        }\n      }\n    },\n    {\n      "comment": "STEP 2: Project group, assignee, and resolution duration.",\n      "stage": {\n        "$project": {\n          "group": "$current_assignment_info.group_name",\n          "assignee": "$current_assignment_info.assignee_profile.full_name",\n          "resolution_minutes": {\n            "$divide": [\n              { "$subtract": ["$inci_resolution_time", "$creation_time"] },\n              60000\n            ]\n          }\n        }\n      }\n    },\n    {\n      "comment": "STEP 3: Group by group and assignee, calculate average.",\n      "stage": {\n        "$group": {\n          "_id": { "group": "$group", "assignee": "$assignee" },\n          "avg_resolution_minutes": { "$avg": "$resolution_minutes" },\n          "ticket_count": { "$sum": 1 }\n        }\n      }\n    },\n    {\n      "comment": "STEP 4: Flatten output fields.",\n      "stage": {\n        "$project": {\n          "_id": 0,\n          "group": "$_id.group",\n          "assignee": "$_id.assignee",\n          "avg_resolution_minutes": 1,\n          "ticket_count": 1\n        }\n      }\n    }\n  ]\n},\n{\n  "nl_query": "Which incidents are stuck in \u2018In Progress\u2019 state for more than 2 days?",\n  "description": "List incidents in \'In Progress\' state for over 2 days.",\n  "collection": "incident",\n  "pipeline": [\n      {\n        "comment": "STEP 1: Filter incidents in \'In Progress\' state for >2 days.",\n        "stage": {\n          "$match": {\n            "is_deleted": false,\n            "basic_info.state.name": "In Progress",\n            "state_change_time": {\n              "$lte": {\n                "$dateSubtract": {\n                  "startDate": "{{dt_now}}",\n                  "unit": "day",\n                  "amount": 2\n                }\n              }\n            }\n          }\n        }\n      },\n      {\n        "comment": "STEP 2: Project relevant fields.",\n        "stage": {\n          "$project": {\n            "_id": 0,\n            "display_id": 1,\n            "basic_info.summary": 1,\n            "current_assignment_info.assignee_profile.full_name": 1,\n            "state_change_time": 1\n          }\n        }\n      }\n    ]\n  },\n  {\n    "nl_query": "Show all open or reassigned incidents in the last 7 days.",\n    "description": "List incidents opened or reassigned in the last 7 days.",\n    "collection": "incident",\n    "pipeline": [\n      {\n        "comment": "STEP 1: Filter incidents created or reassigned in last 7 days and not closed.",\n        "stage": {\n          "$match": {\n            "is_deleted": false,\n            "actual_closure_date": null,\n            "$or": [\n              {\n                "creation_time": {\n                  "$gte": {\n                    "$dateSubtract": {\n                      "startDate": "{{dt_now}}",\n                      "unit": "day",\n                      "amount": 7\n                    }\n                  }\n                }\n              },\n              {\n                "state_change_time": {\n                  "$gte": {\n                    "$dateSubtract": {\n                      "startDate": "{{dt_now}}",\n                      "unit": "day",\n                      "amount": 7\n                    }\n                  }\n                }\n              }\n            ]\n          }\n        }\n      },\n      {\n        "comment": "STEP 2: Project relevant fields.",\n        "stage": {\n          "$project": {\n            "_id": 0,\n            "display_id": 1,\n            "basic_info.summary": 1,\n            "current_assignment_info.assignee_profile.full_name": 1,\n            "creation_time": 1,\n            "state_change_time": 1\n          }\n        }\n      }\n    ]\n  },\n  {\n    "nl_query": "What is the current state distribution of all active tickets?",\n    "description": "Distribution of active tickets by state.",\n    "collection": "incident",\n    "pipeline": [\n      {\n        "comment": "STEP 1: Filter active (not closed) incidents.",\n        "stage": {\n          "$match": {\n            "is_deleted": false,\n            "actual_closure_date": null\n          }\n        }\n      },\n      {\n        "comment": "STEP 2: Group by state name and count.",\n        "stage": {\n          "$group": {\n            "_id": "$basic_info.state.name",\n            "count": { "$sum": 1 }\n          }\n        }\n      },\n      {\n        "comment": "STEP 3: Sort by count descending.",\n        "stage": { "$sort": { "count": -1 } }\n      }\n    ]\n  },\n  {\n    "nl_query": "Which services have recurring incidents?",\n    "description": "Find services with multiple incidents in last 90 days.",\n    "collection": "incident",\n    "pipeline": [\n      {\n        "comment": "STEP 1: Filter incidents created in last 90 days.",\n        "stage": {\n          "$match": {\n            "is_deleted": false,\n            "creation_time": {\n              "$gte": {\n                "$dateSubtract": {\n                  "startDate": "{{dt_now}}",\n                  "unit": "day",\n                  "amount": 90\n                }\n              }\n            }\n          }\n        }\n      },\n      {\n        "comment": "STEP 2: Group by impact_service_name and count.",\n        "stage": {\n          "$group": {\n            "_id": "$basic_info.impact_service_name",\n            "incident_count": { "$sum": 1 }\n          }\n        }\n      },\n      {\n        "comment": "STEP 3: Filter services with more than 1 incident.",\n        "stage": {\n          "$match": { "incident_count": { "$gt": 1 } }\n        }\n      }\n    ]\n  },\n  {\n    "nl_query": "What percentage of tickets were closed without a root cause?",\n    "description": "Percentage of closed tickets with empty closure_note.",\n    "collection": "incident",\n    "pipeline": [\n      {\n        "comment": "STEP 1: Filter closed incidents.",\n        "stage": {\n          "$match": {\n            "is_deleted": false,\n            "actual_closure_date": { "$ne": null }\n          }\n        }\n      },\n      {\n        "comment": "STEP 2: Group for total and without root cause.",\n        "stage": {\n          "$group": {\n            "_id": null,\n            "total_closed": { "$sum": 1 },\n            "no_root_cause": {\n              "$sum": {\n                "$cond": [\n                  { "$or": [\n                    { "$eq": ["$close_info.closure_note", null] },\n                    { "$eq": ["$close_info.closure_note", ""] }\n                  ] },\n                  1,\n                  0\n                ]\n              }\n            }\n          }\n        }\n      },\n      {\n        "comment": "STEP 3: Project percentage.",\n        "stage": {\n          "$project": {\n            "_id": 0,\n            "percentage_no_root_cause": {\n              "$multiply": [\n                { "$divide": ["$no_root_cause", "$total_closed"] },\n                100\n              ]\n            },\n            "total_closed": 1,\n            "no_root_cause": 1\n          }\n        }\n      }\n    ]\n  },\n  {\n    "nl_query": "How many incidents were marked as high impact but low severity?",\n    "description": "Count of incidents with high impact and low severity.",\n    "collection": "incident",\n    "pipeline": [\n      {\n        "comment": "STEP 1: Filter incidents with high impact and low severity.",\n        "stage": {\n          "$match": {\n            "is_deleted": false,\n            "basic_info.impact.name": "High",\n            "basic_info.severity.name": "Low"\n          }\n        }\n      },\n      {\n        "comment": "STEP 2: Count the incidents.",\n        "stage": { "$count": "high_impact_low_severity_count" }\n      }\n    ]\n  },\n  {\n    "nl_query": "Which locations are reporting the most issues?",\n    "description": "Top locations by incident count.",\n    "collection": "incident",\n    "pipeline": [\n      {\n        "comment": "STEP 1: Filter active incidents with location.",\n        "stage": {\n          "$match": {\n            "is_deleted": false,\n            "requester.location.location_name": { "$ne": null }\n          }\n        }\n      },\n      {\n        "comment": "STEP 2: Group by location and count.",\n        "stage": {\n          "$group": {\n            "_id": "$requester.location.location_name",\n            "incident_count": { "$sum": 1 }\n          }\n        }\n      },\n      {\n        "comment": "STEP 3: Sort by count descending.",\n        "stage": { "$sort": { "incident_count": -1 } }\n      },\n      {\n        "comment": "STEP 4: Limit to top 10 locations.",\n        "stage": { "$limit": 10 }\n      }\n    ]\n  },\n  {\n    "nl_query": "Who are the top requesters of incidents?",\n    "description": "Top incident requesters by count.",\n    "collection": "incident",\n    "pipeline": [\n      {\n        "comment": "STEP 1: Filter active incidents with requester.",\n        "stage": {\n          "$match": {\n            "is_deleted": false,\n            "requester.full_name": { "$ne": null }\n          }\n        }\n      },\n      {\n        "comment": "STEP 2: Group by requester and count.",\n        "stage": {\n          "$group": {\n            "_id": "$requester.full_name",\n            "incident_count": { "$sum": 1 }\n          }\n        }\n      },\n      {\n        "comment": "STEP 3: Sort by count descending.",\n        "stage": { "$sort": { "incident_count": -1 } }\n      },\n      {\n        "comment": "STEP 4: Limit to top 10 requesters.",\n        "stage": { "$limit": 10 }\n      }\n    ]\n  },\n  {\n    "nl_query": "Which incidents were assigned but never updated?",\n    "description": "Incidents assigned but last_update_time equals creation_time.",\n    "collection": "incident",\n    "pipeline": [\n      {\n        "comment": "STEP 1: Filter incidents where last_update_time equals creation_time.",\n        "stage": {\n          "$match": {\n            "is_deleted": false,\n            "current_assignment_info.assignee_profile.full_name": { "$ne": null },\n            "$expr": { "$eq": ["$last_update_time", "$creation_time"] }\n          }\n        }\n      },\n      {\n        "comment": "STEP 2: Project relevant fields.",\n        "stage": {\n          "$project": {\n            "_id": 0,\n            "display_id": 1,\n            "basic_info.summary": 1,\n            "current_assignment_info.assignee_profile.full_name": 1,\n            "creation_time": 1,\n            "last_update_time": 1\n          }\n        }\n      }\n    ]\n  },\n  {\n    "nl_query": "Get all critical-priority tickets for assignee {{assignee}}",\n    "description": "Fetch all incident tickets with \'Critical\' priority assigned to the user.",\n    "collection": "incident",\n    "pipeline": [\n      {\n        "comment": "STEP 1: Match tickets where priority is \'Critical\' and assignee full name.",\n        "stage": {\n          "$match": {\n            "is_deleted": false,\n            "basic_info.priority.name": "Critical",\n            "current_assignment_info.assignee_profile.full_name": "{{assignee}}"\n          }\n        }\n      },\n      {\n        "comment": "STEP 2: Project relevant ticket fields for output.",\n        "stage": {\n          "$project": {\n            "_id": 0,\n            "display_id": 1,\n            "basic_info.summary": 1,\n            "basic_info.priority.name": 1,\n            "current_assignment_info.assignee_profile.full_name": 1,\n            "creation_time": 1,\n            "actual_closure_date": 1,\n            "basic_info.state.name": 1,\n            "basic_info.status.name": 1\n          }\n        }\n      }\n    ]\n  },\n  {\n    "nl_query": "What is the average resolution time of incidents in last 365 days for service {{service_name}}?",\n    "description": "Calculate the average resolution time (in minutes) for incidents related to a specific service in the last 365 days.",\n    "collection": "incident",\n    "pipeline": [\n      {\n        "comment": "STEP 1: Filter incidents created in the last 365 days and where the impact_service_name matches.",\n        "stage": {\n          "$match": {\n            "is_deleted": false,\n            "basic_info.impact_service_name": "{{service_name}}",\n            "creation_time": {\n              "$gte": {\n                "$dateSubtract": {\n                  "startDate": "{{dt_now}}",\n                  "unit": "day",\n                  "amount": 365\n                }\n              }\n            },\n            "inci_resolution_time": { "$ne": null }\n          }\n        }\n      },\n      {\n        "comment": "STEP 2: Project resolution duration in minutes.",\n        "stage": {\n          "$project": {\n            "resolution_duration_minutes": {\n              "$divide": [\n                { "$subtract": [ "$inci_resolution_time", "$creation_time" ] },\n                60000\n              ]\n            }\n          }\n        }\n      },\n      {\n        "comment": "STEP 3: Group to calculate average resolution time.",\n        "stage": {\n          "$group": {\n            "_id": null,\n            "average_resolution_time_minutes": { "$avg": "$resolution_duration_minutes" },\n            "incident_count": { "$sum": 1 }\n          }\n        }\n      },\n      {\n        "comment": "STEP 4: Clean final output.",\n        "stage": {\n          "$project": {\n            "_id": 0,\n            "average_resolution_time_minutes": 1,\n            "incident_count": 1\n          }\n        }\n      }\n    ]\n  },\n  {\n    "nl_query": "Show all open incidents and requests with their priority and assignee details",\n    "description": "Get a unified view of all open incidents and requests with priority and assignment information.",\n    "collection": "incident",\n    "pipeline": [\n      {\n        "comment": "STEP 1: Match open incidents (state not \'Close\').",\n        "stage": {\n          "$match": {\n            "is_deleted": false,\n            "basic_info.state.name": { "$ne": "Close" }\n          }\n        }\n      },\n      {\n        "comment": "STEP 2: Add ticket type field and project relevant fields.",\n        "stage": {\n          "$project": {\n            "_id": 0,\n            "display_id": 1,\n            "ticket_type": "incident",\n            "basic_info.summary": 1,\n            "basic_info.priority.name": 1,\n            "basic_info.state.name": 1,\n            "current_assignment_info.assignee_profile.full_name": 1,\n            "current_assignment_info.group_name": 1,\n            "creation_time": 1,\n            "basic_info.impact_service_name": 1\n          }\n        }\n      },\n      {\n        "comment": "STEP 3: Union with open requests.",\n        "stage": {\n          "$unionWith": {\n            "coll": "request_process",\n            "pipeline": [\n              {\n                "$match": {\n                  "is_deleted": false,\n                  "basic_info.state.name": { "$ne": "Close" }\n                }\n              },\n              {\n                "$project": {\n                  "_id": 0,\n                  "display_id": 1,\n                  "ticket_type": "request",\n                  "basic_info.summary": 1,\n                  "basic_info.priority.name": 1,\n                  "basic_info.state.name": 1,\n                  "current_assignment_info.assignee_profile.full_name": 1,\n                  "current_assignment_info.group_name": 1,\n                  "creation_time": 1,\n                  "basic_info.impact_service_name": 1\n                }\n              }\n            ]\n          }\n        }\n      },\n      {\n        "comment": "STEP 4: Sort by creation time descending.",\n        "stage": {\n          "$sort": {\n            "creation_time": -1\n          }\n        }\n      }\n    ]\n  },\n  {\n    "nl_query": "Count tickets by priority for organization {{impact_service}}",\n    "description": "Get the count of tickets grouped by priority level for a specific impact service.",\n    "collection": "incident",\n    "pipeline": [\n      {\n        "comment": "STEP 1: Match tickets for the specific organization.",\n        "stage": {\n          "$match": {\n            "is_deleted": false,\n            "basic_info.impact_service_name": "{{impact_service}}"\n          }\n        }\n      },\n      {\n        "comment": "STEP 2: Group by priority and count.",\n        "stage": {\n          "$group": {\n            "_id": "$basic_info.priority.name",\n            "count": { "$sum": 1 }\n          }\n        }\n      },\n      {\n        "comment": "STEP 3: Union with request counts.",\n        "stage": {\n          "$unionWith": {\n            "coll": "request_process",\n            "pipeline": [\n              {\n                "$match": {\n                  "is_deleted": false,\n                  "basic_info.impact_service_name": "{{impact_service}}"\n                }\n              },\n              {\n                "$group": {\n                  "_id": "$basic_info.priority.name",\n                  "count": { "$sum": 1 }\n                }\n              }\n            ]\n          }\n        }\n      },\n      {\n        "comment": "STEP 4: Group again to sum counts from both collections.",\n        "stage": {\n          "$group": {\n            "_id": "$_id",\n            "total_count": { "$sum": "$count" }\n          }\n        }\n      },\n      {\n        "comment": "STEP 5: Sort by total count descending.",\n        "stage": {\n          "$sort": {\n            "total_count": -1\n          }\n        }\n      }\n    ]\n  },\n  {\n    "nl_query": "Get incidents created by source {{source}} in the last {{days}} days",\n    "description": "Retrieve incidents created through a specific source (Web, Email, etc.) within a date range.",\n    "collection": "incident",\n    "pipeline": [\n      {\n        "comment": "STEP 1: Filter by source and date range.",\n        "stage": {\n          "$match": {\n            "is_deleted": false,\n            "basic_info.incident_source.name": "{{source}}",\n            "creation_time": {\n              "$gte": {\n                "$dateSubtract": {\n                  "startDate": "{{dt_now}}",\n                  "unit": "day",\n                  "amount": "{{days}}"\n                }\n              }\n            }\n          }\n        }\n      },\n      {\n        "comment": "STEP 2: Project relevant fields and add aging information.",\n        "stage": {\n          "$project": {\n            "_id": 0,\n            "display_id": 1,\n            "basic_info.summary": 1,\n            "basic_info.incident_source.name": 1,\n            "basic_info.priority.name": 1,\n            "basic_info.state.name": 1,\n            "creation_time": 1,\n            "requester.full_name": 1,\n            "age_days": {\n              "$divide": [\n                { "$subtract": [ "{{dt_now}}", "$creation_time" ] },\n                86400000\n              ]\n            }\n          }\n        }\n      },\n      {\n        "comment": "STEP 3: Sort by creation time descending.",\n        "stage": {\n          "$sort": {\n            "creation_time": -1\n          }\n        }\n      }\n    ]\n  },\n  {\n    "nl_query": "Find all tickets with watchers containing email {{email}}",\n    "description": "Search for tickets where a specific email address is in the watchers/followers list.",\n    "collection": "incident",\n    "pipeline": [\n      {\n        "comment": "STEP 1: Match tickets where the email is in current_watcher array.",\n        "stage": {\n          "$match": {\n            "is_deleted": false,\n            "current_watcher.email": "{{email}}"\n          }\n        }\n      },\n      {\n        "comment": "STEP 2: Project ticket details and filter watcher info.",\n        "stage": {\n          "$project": {\n            "_id": 0,\n            "display_id": 1,\n            "basic_info.summary": 1,\n            "basic_info.state.name": 1,\n            "basic_info.priority.name": 1,\n            "creation_time": 1,\n            "watchers": {\n              "$filter": {\n                "input": "$current_watcher",\n                "cond": { "$eq": [ "$$this.email", "{{email}}" ] }\n              }\n            }\n          }\n        }\n      },\n      {\n        "comment": "STEP 3: Union with requests containing the same email in watchers.",\n        "stage": {\n          "$unionWith": {\n            "coll": "request_process",\n            "pipeline": [\n              {\n                "$match": {\n                  "is_deleted": false,\n                  "current_watcher.email": "{{email}}"\n                }\n              },\n              {\n                "$project": {\n                  "_id": 0,\n                  "display_id": 1,\n                  "basic_info.summary": 1,\n                  "basic_info.state.name": 1,\n                  "basic_info.priority.name": 1,\n                  "creation_time": 1,\n                  "watchers": {\n                    "$filter": {\n                      "input": "$current_watcher",\n                      "cond": { "$eq": [ "$$this.email", "{{email}}" ] }\n                    }\n                  }\n                }\n              }\n            ]\n          }\n        }\n      }\n    ]\n  },\n  {\n    "nl_query": "Get monthly incident trends for the last 12 months",\n    "description": "Generate monthly incident creation trends over the past 12 months.",\n    "collection": "incident",\n    "pipeline": [\n      {\n        "comment": "STEP 1: Match incidents from the last 12 months.",\n        "stage": {\n          "$match": {\n            "is_deleted": false,\n            "creation_time": {\n              "$gte": {\n                "$dateSubtract": {\n                  "startDate": "{{dt_now}}",\n                  "unit": "month",\n                  "amount": 12\n                }\n              }\n            }\n          }\n        }\n      },\n      {\n        "comment": "STEP 2: Group by year-month and count incidents.",\n        "stage": {\n          "$group": {\n            "_id": {\n              "year": { "$year": "$creation_time" },\n              "month": { "$month": "$creation_time" }\n            },\n            "incident_count": { "$sum": 1 },\n            "high_priority_count": {\n              "$sum": {\n                "$cond": [\n                  { "$eq": [ "$basic_info.priority.name", "High" ] },\n                  1,\n                  0\n                ]\n              }\n            },\n            "critical_priority_count": {\n              "$sum": {\n                "$cond": [\n                  { "$eq": [ "$basic_info.priority.name", "Critical" ] },\n                  1,\n                  0\n                ]\n              }\n            }\n          }\n        }\n      },\n      {\n        "comment": "STEP 3: Sort by year and month.",\n        "stage": {\n          "$sort": {\n            "_id.year": 1,\n            "_id.month": 1\n          }\n        }\n      },\n      {\n        "comment": "STEP 4: Format output with month names.",\n        "stage": {\n          "$project": {\n            "_id": 0,\n            "year": "$_id.year",\n            "month": "$_id.month",\n            "month_name": {\n              "$arrayElemAt": [\n                ["", "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],\n                "$_id.month"\n              ]\n            },\n            "incident_count": 1,\n            "high_priority_count": 1,\n            "critical_priority_count": 1\n          }\n        }\n      }\n    ]\n  },\n  {\n    "nl_query": "Show workload distribution across teams for organization {{organization_id}}",\n    "description": "Display ticket distribution and workload metrics across different teams.",\n    "collection": "incident",\n    "pipeline": [\n      {\n        "comment": "STEP 1: Match tickets for the organization.",\n        "stage": {\n          "$match": {\n            "is_deleted": false,\n            "organization": "{{organization_id}}"\n          }\n        }\n      },\n      {\n        "comment": "STEP 2: Group by team and calculate metrics.",\n        "stage": {\n          "$group": {\n            "_id": "$current_assignment_info.group_name",\n            "total_tickets": { "$sum": 1 },\n            "open_tickets": {\n              "$sum": {\n                "$cond": [\n                  { "$ne": [ "$basic_info.state.name", "Close" ] },\n                  1,\n                  0\n                ]\n              }\n            },\n            "high_priority_tickets": {\n              "$sum": {\n                "$cond": [\n                  { "$eq": [ "$basic_info.priority.name", "High" ] },\n                  1,\n                  0\n                ]\n              }\n            },\n            "avg_resolution_time_hours": {\n              "$avg": {\n                "$cond": [\n                  { "$ne": [ "$inci_resolution_time", null ] },\n                  { "$divide": [ { "$subtract": [ "$inci_resolution_time", "$creation_time" ] }, 3600000 ] },\n                  null\n                ]\n              }\n            }\n          }\n        }\n      },\n      {\n        "comment": "STEP 3: Union with request workload data.",\n        "stage": {\n          "$unionWith": {\n            "coll": "request_process",\n            "pipeline": [\n              {\n                "$match": {\n                  "is_deleted": false,\n                  "organization": "{{organization_id}}"\n                }\n              },\n              {\n                "$group": {\n                  "_id": "$current_assignment_info.group_name",\n                  "total_tickets": { "$sum": 1 },\n                  "open_tickets": {\n                    "$sum": {\n                      "$cond": [\n                        { "$ne": [ "$basic_info.state.name", "Close" ] },\n                        1,\n                        0\n                      ]\n                    }\n                  },\n                  "high_priority_tickets": {\n                    "$sum": {\n                      "$cond": [\n                        { "$eq": [ "$basic_info.priority.name", "High" ] },\n                        1,\n                        0\n                      ]\n                    }\n                  },\n                  "avg_resolution_time_hours": {\n                    "$avg": {\n                      "$cond": [\n                        { "$ne": [ "$request_resolution_time", null ] },\n                        { "$divide": [ { "$subtract": [ "$request_resolution_time", "$creation_time" ] }, 3600000 ] },\n                        null\n                      ]\n                    }\n                  }\n                }\n              }\n            ]\n          }\n        }\n      },\n      {\n        "comment": "STEP 4: Group again to sum metrics from both collections.",\n        "stage": {\n          "$group": {\n            "_id": "$_id",\n            "total_tickets": { "$sum": "$total_tickets" },\n            "open_tickets": { "$sum": "$open_tickets" },\n            "high_priority_tickets": { "$sum": "$high_priority_tickets" },\n            "avg_resolution_time_hours": { "$avg": "$avg_resolution_time_hours" }\n          }\n        }\n      },\n      {\n        "comment": "STEP 5: Sort by total tickets descending.",\n        "stage": {\n          "$sort": {\n            "total_tickets": -1\n          }\n        }\n      }\n    ]\n  },\n  {\n    "nl_query": "Find employee onboarding requests with status {{status}} and employee type {{employee_type}}",\n    "description": "Retrieve onboarding requests filtered by status and employee type.",\n    "collection": "request_process",\n    "pipeline": [\n      {\n        "comment": "STEP 1: Match onboarding requests with specific status and employee type.",\n        "stage": {\n          "$match": {\n            "is_deleted": false,\n            "basic_info.request_type.name": "Onboarding",\n            "employee_info.status.name": "{{status}}",\n            "employee_info.employee_type": "{{employee_type}}"\n          }\n        }\n      },\n      {\n        "comment": "STEP 2: Project relevant fields including employee information.",\n        "stage": {\n          "$project": {\n            "_id": 0,\n            "display_id": 1,\n            "basic_info.summary": 1,\n            "basic_info.state.name": 1,\n            "basic_info.priority.name": 1,\n            "creation_time": 1,\n            "requester.full_name": 1,\n            "current_assignment_info.assignee_profile.full_name": 1,\n            "employee_info.employee_id": 1,\n            "employee_info.employee_type": 1,\n            "employee_info.personal_email_id": 1,\n            "employee_info.department": 1,\n            "employee_info.status.name": 1,\n            "template_info.template_name": 1\n          }\n        }\n      },\n      {\n        "comment": "STEP 3: Sort by creation time descending.",\n        "stage": {\n          "$sort": {\n            "creation_time": -1\n          }\n        }\n      }\n    ]\n  },\n  {\n    "nl_query": "Show request template usage statistics for organization {{organization_id}}",\n    "description": "Analyze usage patterns of request templates within an organization.",\n    "collection": "request_process",\n    "pipeline": [\n      {\n        "comment": "STEP 1: Match requests for the organization with template info.",\n        "stage": {\n          "$match": {\n            "is_deleted": false,\n            "organization": "{{organization_id}}",\n            "template_info.template_name": { "$ne": null }\n          }\n        }\n      },\n      {\n        "comment": "STEP 2: Group by template and calculate usage metrics.",\n        "stage": {\n          "$group": {\n            "_id": "$template_info.template_name",\n            "total_requests": { "$sum": 1 },\n            "completed_requests": {\n              "$sum": {\n                "$cond": [\n                  { "$eq": [ "$basic_info.state.name", "Close" ] },\n                  1,\n                  0\n                ]\n              }\n            },\n            "in_progress_requests": {\n              "$sum": {\n                "$cond": [\n                  { "$eq": [ "$basic_info.state.name", "In Progress" ] },\n                  1,\n                  0\n                ]\n              }\n            },\n            "avg_completion_time_hours": {\n              "$avg": {\n                "$cond": [\n                  { "$ne": [ "$actual_closure_date", null ] },\n                  { "$divide": [ { "$subtract": [ "$actual_closure_date", "$creation_time" ] }, 3600000 ] },\n                  null\n                ]\n              }\n            },\n            "recent_usage": { "$max": "$creation_time" }\n          }\n        }\n      },\n      {\n        "comment": "STEP 3: Calculate completion percentage.",\n        "stage": {\n          "$project": {\n            "_id": 1,\n            "total_requests": 1,\n            "completed_requests": 1,\n            "in_progress_requests": 1,\n            "avg_completion_time_hours": 1,\n            "recent_usage": 1,\n            "completion_percentage": {\n              "$multiply": [\n                { "$divide": [ "$completed_requests", "$total_requests" ] },\n                100\n              ]\n            }\n          }\n        }\n      },\n      {\n        "comment": "STEP 4: Sort by total requests descending.",\n        "stage": {\n          "$sort": {\n            "total_requests": -1\n          }\n        }\n      }\n    ]\n  },\n  {\n    "nl_query": "Find overdue tickets with aging analysis",\n    "description": "Identify tickets that are overdue and analyze their aging patterns.",\n    "collection": "incident",\n    "pipeline": [\n      {\n        "comment": "STEP 1: Match open tickets older than 7 days.",\n        "stage": {\n          "$match": {\n            "is_deleted": false,\n            "basic_info.state.name": { "$ne": "Close" },\n            "creation_time": {\n              "$lte": {\n                "$dateSubtract": {\n                  "startDate": "{{dt_now}}",\n                  "unit": "day",\n                  "amount": 7\n                }\n              }\n            }\n          }\n        }\n      },\n      {\n        "comment": "STEP 2: Calculate aging and categorize tickets.",\n        "stage": {\n          "$project": {\n            "_id": 0,\n            "display_id": 1,\n            "basic_info.summary": 1,\n            "basic_info.priority.name": 1,\n            "basic_info.state.name": 1,\n            "creation_time": 1,\n            "requester.full_name": 1,\n            "current_assignment_info.assignee_profile.full_name": 1,\n            "current_assignment_info.group_name": 1,\n            "age_days": {\n              "$divide": [\n                { "$subtract": [ "{{dt_now}}", "$creation_time" ] },\n                86400000\n              ]\n            },\n            "age_category": {\n              "$switch": {\n                "branches": [\n                  {\n                    "case": { "$gte": [ { "$divide": [ { "$subtract": [ "{{dt_now}}", "$creation_time" ] }, 86400000 ] }, 30 ] },\n                    "then": "Critical (30+ days)"\n                  },\n                  {\n                    "case": { "$gte": [ { "$divide": [ { "$subtract": [ "{{dt_now}}", "$creation_time" ] }, 86400000 ] }, 14 ] },\n                    "then": "High (14-29 days)"\n                  },\n                  {\n                    "case": { "$gte": [ { "$divide": [ { "$subtract": [ "{{dt_now}}", "$creation_time" ] }, 86400000 ] }, 7 ] },\n                    "then": "Medium (7-13 days)"\n                  }\n                ],\n                "default": "Low (0-6 days)"\n              }\n            }\n          }\n        }\n      },\n      {\n        "comment": "STEP 3: Union with overdue requests.",\n        "stage": {\n          "$unionWith": {\n            "coll": "request_process",\n            "pipeline": [\n              {\n                "$match": {\n                  "is_deleted": false,\n                  "basic_info.state.name": { "$ne": "Close" },\n                  "creation_time": {\n                    "$lte": {\n                      "$dateSubtract": {\n                        "startDate": "{{dt_now}}",\n                        "unit": "day",\n                        "amount": 7\n                      }\n                    }\n                  }\n                }\n              },\n              {\n                "$project": {\n                  "_id": 0,\n                  "display_id": 1,\n                  "basic_info.summary": 1,\n                  "basic_info.priority.name": 1,\n                  "basic_info.state.name": 1,\n                  "creation_time": 1,\n                  "requester.full_name": 1,\n                  "current_assignment_info.assignee_profile.full_name": 1,\n                  "current_assignment_info.group_name": 1,\n                  "age_days": {\n                    "$divide": [\n                      { "$subtract": [ "{{dt_now}}", "$creation_time" ] },\n                      86400000\n                    ]\n                  },\n                  "age_category": {\n                    "$switch": {\n                      "branches": [\n                        {\n                          "case": { "$gte": [ { "$divide": [ { "$subtract": [ "{{dt_now}}", "$creation_time" ] }, 86400000 ] }, 30 ] },\n                          "then": "Critical (30+ days)"\n                        },\n                        {\n                          "case": { "$gte": [ { "$divide": [ { "$subtract": [ "{{dt_now}}", "$creation_time" ] }, 86400000 ] }, 14 ] },\n                          "then": "High (14-29 days)"\n                        },\n                        {\n                          "case": { "$gte": [ { "$divide": [ { "$subtract": [ "{{dt_now}}", "$creation_time" ] }, 86400000 ] }, 7 ] },\n                          "then": "Medium (7-13 days)"\n                        }\n                      ],\n                      "default": "Low (0-6 days)"\n                    }\n                  }\n                }\n              }\n            ]\n          }\n        }\n      },\n      {\n        "comment": "STEP 4: Sort by age descending.",\n        "stage": {\n          "$sort": {\n            "age_days": -1\n          }\n        }\n      }\n    ]\n  },\n  {\n    "nl_query": "Get ticket volume trends by source for the last 6 months",\n    "description": "Analyze ticket creation trends grouped by source over the past 6 months.",\n    "collection": "incident",\n    "pipeline": [\n      {\n        "comment": "STEP 1: Match tickets from the last 6 months.",\n        "stage": {\n          "$match": {\n            "is_deleted": false,\n            "creation_time": {\n              "$gte": {\n                "$dateSubtract": {\n                  "startDate": "{{dt_now}}",\n                  "unit": "month",\n                  "amount": 6\n                }\n              }\n            }\n          }\n        }\n      },\n      {\n        "comment": "STEP 2: Group by source and month.",\n        "stage": {\n          "$group": {\n            "_id": {\n              "source": "$basic_info.incident_source.name",\n              "year": { "$year": "$creation_time" },\n              "month": { "$month": "$creation_time" }\n            },\n            "ticket_count": { "$sum": 1 },\n            "avg_priority_score": {\n              "$avg": {\n                "$switch": {\n                  "branches": [\n                    { "case": { "$eq": [ "$basic_info.priority.name", "Critical" ] }, "then": 4 },\n                    { "case": { "$eq": [ "$basic_info.priority.name", "High" ] }, "then": 3 },\n                    { "case": { "$eq": [ "$basic_info.priority.name", "Medium" ] }, "then": 2 },\n                    { "case": { "$eq": [ "$basic_info.priority.name", "Low" ] }, "then": 1 }\n                  ],\n                  "default": 0\n                }\n              }\n            }\n          }\n        }\n      },\n      {\n        "comment": "STEP 3: Union with request data.",\n        "stage": {\n          "$unionWith": {\n            "coll": "request_process",\n            "pipeline": [\n              {\n                "$match": {\n                  "is_deleted": false,\n                  "creation_time": {\n                    "$gte": {\n                      "$dateSubtract": {\n                        "startDate": "{{dt_now}}",\n                        "unit": "month",\n                        "amount": 6\n                      }\n                    }\n                  }\n                }\n              },\n              {\n                "$group": {\n                  "_id": {\n                    "source": "$basic_info.request_source.name",\n                    "year": { "$year": "$creation_time" },\n                    "month": { "$month": "$creation_time" }\n                  },\n                  "ticket_count": { "$sum": 1 },\n                  "avg_priority_score": {\n                    "$avg": {\n                      "$switch": {\n                        "branches": [\n                          { "case": { "$eq": [ "$basic_info.priority.name", "Critical" ] }, "then": 4 },\n                          { "case": { "$eq": [ "$basic_info.priority.name", "High" ] }, "then": 3 },\n                          { "case": { "$eq": [ "$basic_info.priority.name", "Medium" ] }, "then": 2 },\n                          { "case": { "$eq": [ "$basic_info.priority.name", "Low" ] }, "then": 1 }\n                        ],\n                        "default": 0\n                      }\n                    }\n                  }\n                }\n              }\n            ]\n          }\n        }\n      },\n      {\n        "comment": "STEP 4: Group again to merge data from both collections.",\n        "stage": {\n          "$group": {\n            "_id": "$_id",\n            "total_tickets": { "$sum": "$ticket_count" },\n            "avg_priority_score": { "$avg": "$avg_priority_score" }\n          }\n        }\n      },\n      {\n        "comment": "STEP 5: Sort by year, month, and source.",\n        "stage": {\n          "$sort": {\n            "_id.year": 1,\n            "_id.month": 1,\n            "_id.source": 1\n          }\n        }\n      }\n    ]\n  },\n  {\n    "nl_query": "Get requester activity summary for email {{email}}",\n    "description": "Analyze ticket creation patterns and activity for a specific requester email.",\n    "collection": "incident",\n    "pipeline": [\n      {\n        "comment": "STEP 1: Match tickets from the specific requester email.",\n        "stage": {\n          "$match": {\n            "is_deleted": false,\n            "requester.email": "{{email}}"\n          }\n        }\n      },\n      {\n        "comment": "STEP 2: Group by requester and calculate activity metrics.",\n        "stage": {\n          "$group": {\n            "_id": "$requester.email",\n            "requester_name": { "$first": "$requester.full_name" },\n            "total_tickets": { "$sum": 1 },\n            "open_tickets": {\n              "$sum": {\n                "$cond": [\n                  { "$ne": [ "$basic_info.state.name", "Close" ] },\n                  1,\n                  0\n                ]\n              }\n            },\n            "closed_tickets": {\n              "$sum": {\n                "$cond": [\n                  { "$eq": [ "$basic_info.state.name", "Close" ] },\n                  1,\n                  0\n                ]\n              }\n            },\n            "high_priority_tickets": {\n              "$sum": {\n                "$cond": [\n                  { "$eq": [ "$basic_info.priority.name", "High" ] },\n                  1,\n                  0\n                ]\n              }\n            },\n            "first_ticket_date": { "$min": "$creation_time" },\n            "last_ticket_date": { "$max": "$creation_time" },\n            "services_used": { "$addToSet": "$basic_info.impact_service_name" }\n          }\n        }\n      },\n      {\n        "comment": "STEP 3: Union with request activity data.",\n        "stage": {\n          "$unionWith": {\n            "coll": "request_process",\n            "pipeline": [\n              {\n                "$match": {\n                  "is_deleted": false,\n                  "requester.email": "{{email}}"\n                }\n              },\n              {\n                "$group": {\n                  "_id": "$requester.email",\n                  "requester_name": { "$first": "$requester.full_name" },\n                  "total_tickets": { "$sum": 1 },\n                  "open_tickets": {\n                    "$sum": {\n                      "$cond": [\n                        { "$ne": [ "$basic_info.state.name", "Close" ] },\n                        1,\n                        0\n                      ]\n                    }\n                  },\n                  "closed_tickets": {\n                    "$sum": {\n                      "$cond": [\n                        { "$eq": [ "$basic_info.state.name", "Close" ] },\n                        1,\n                        0\n                      ]\n                    }\n                  },\n                  "high_priority_tickets": {\n                    "$sum": {\n                      "$cond": [\n                        { "$eq": [ "$basic_info.priority.name", "High" ] },\n                        1,\n                        0\n                      ]\n                    }\n                  },\n                  "first_ticket_date": { "$min": "$creation_time" },\n                  "last_ticket_date": { "$max": "$creation_time" },\n                  "services_used": { "$addToSet": "$basic_info.impact_service_name" }\n                }\n              }\n            ]\n          }\n        }\n      },\n      {\n        "comment": "STEP 4: Group again to merge data from both collections.",\n        "stage": {\n          "$group": {\n            "_id": "$_id",\n            "requester_name": { "$first": "$requester_name" },\n            "total_tickets": { "$sum": "$total_tickets" },\n            "open_tickets": { "$sum": "$open_tickets" },\n            "closed_tickets": { "$sum": "$closed_tickets" },\n            "high_priority_tickets": { "$sum": "$high_priority_tickets" },\n            "first_ticket_date": { "$min": "$first_ticket_date" },\n            "last_ticket_date": { "$max": "$last_ticket_date" },\n            "services_used": { "$first": "$services_used" }\n          }\n        }\n      },\n      {\n        "comment": "STEP 5: Calculate activity duration and format output.",\n        "stage": {\n          "$project": {\n            "_id": 0,\n            "requester_email": "$_id",\n            "requester_name": 1,\n            "total_tickets": 1,\n            "open_tickets": 1,\n            "closed_tickets": 1,\n            "high_priority_tickets": 1,\n            "first_ticket_date": 1,\n            "last_ticket_date": 1,\n            "services_used": 1,\n            "activity_duration_days": {\n              "$divide": [\n                { "$subtract": [ "$last_ticket_date", "$first_ticket_date" ] },\n                86400000\n              ]\n            }\n          }\n        }\n      }\n    ]\n  }\n]\n'})})]})}function d(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(l,{...n})}):l(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>o,x:()=>r});var i=t(6540);const a={},s=i.createContext(a);function o(n){const e=i.useContext(s);return i.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function r(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:o(n.components),i.createElement(s.Provider,{value:e},n.children)}}}]);