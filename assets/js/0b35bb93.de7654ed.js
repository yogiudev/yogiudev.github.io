"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6989],{7631:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>s,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"SOLA/prompts/nlp","title":"nlp","description":"","source":"@site/docs/SOLA/prompts/nlp.md","sourceDirName":"SOLA/prompts","slug":"/SOLA/prompts/nlp","permalink":"/docs/SOLA/prompts/nlp","draft":false,"unlisted":false,"editUrl":"https://github.com/yogiudev/yogiudev.github.io/tree/main/docs/SOLA/prompts/nlp.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Generate Queries from Metadata","permalink":"/docs/SOLA/prompts/inci_req_queries"},"next":{"title":"SLA Metadata","permalink":"/docs/SOLA/prompts/sla_metadata"}}');var i=t(4848),r=t(8453);const s={},o=void 0,c={},l=[];function d(e){const n={code:"code",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"#NLP"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'\n# Extract enhanced metadata for each collection\ncollection_metadata = {\n    "collection_name": "incident",\n    "description": "Incident tickets with SLA tracking",\n    "key_fields": {\n        "display_id": "Human-readable incident ID",\n        "basic_info.state.name": "Current incident state",\n        "creation_time": "When incident was created",\n        "current_assignment_info.assignee_profile.full_name": "Assigned engineer"\n    },\n    "common_queries": ["find my incidents", "incidents about to breach", "overdue tickets"],\n    "relationships": ["links to slm_metric_data via reference_id"]\n}\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'templates = {\n    "my_incidents": {\n        "intent": "find incidents assigned to user",\n        "template": "db.incident.find({\'current_assignment_info.assignee_profile.full_name\': \'{{user_name}}\'})",\n        "parameters": ["user_name"]\n    },\n    "breach_analysis": {\n        "intent": "find incidents about to breach SLA",\n        "template": "db.slm_metric_data.find({\'is_breached\': false, \'metric_expected_time\': {\'$lt\': new Date(Date.now() + {{hours}}*3600000)}})",\n        "parameters": ["hours"]\n    }\n}\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# Minimal context prompting approach\nsystem_prompt = """You are a MongoDB query generator for SLA management.\nGiven: user intent, relevant schema fields, and query template\nGenerate: Valid MongoDB aggregation pipeline\n\nSchema Context: {minimal_schema}\nTemplate: {relevant_template}\nUser Query: {user_query}\n\nOutput only valid MongoDB JSON - no explanations."""\n'})})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>o});var a=t(6540);const i={},r=a.createContext(i);function s(e){const n=a.useContext(r);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),a.createElement(r.Provider,{value:n},e.children)}}}]);