"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4105],{6813:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>g,frontMatter:()=>s,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"guides/mongodb-queries","title":"mongodb-queries","description":"What is MongoDB Aggregation?","source":"@site/docs/guides/mongodb-queries.md","sourceDirName":"guides","slug":"/guides/mongodb-queries","permalink":"/docs/guides/mongodb-queries","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/guides/mongodb-queries.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"LangGraph: Advanced","permalink":"/docs/guides/langraph-advanced"},"next":{"title":"sla_context","permalink":"/docs/guides/sla_context"}}');var r=a(4848),i=a(8453);const s={},o="MongoDB Aggregation Queries: Complete Guidebook",d={},l=[{value:"What is MongoDB Aggregation?",id:"what-is-mongodb-aggregation",level:2},{value:"The Aggregation Pipeline Concept",id:"the-aggregation-pipeline-concept",level:2},{value:"Core Aggregation Stages",id:"core-aggregation-stages",level:2},{value:"1. $match - Filtering Documents",id:"1-match---filtering-documents",level:3},{value:"2. $project - Reshaping Documents",id:"2-project---reshaping-documents",level:3},{value:"3. $group - Grouping and Aggregating",id:"3-group---grouping-and-aggregating",level:3},{value:"4. $sort - Ordering Results",id:"4-sort---ordering-results",level:3},{value:"5. $limit and $skip - Pagination",id:"5-limit-and-skip---pagination",level:3},{value:"Advanced Aggregation Stages",id:"advanced-aggregation-stages",level:2},{value:"6. $unwind - Deconstructing Arrays",id:"6-unwind---deconstructing-arrays",level:3},{value:"7. $lookup - Joining Collections",id:"7-lookup---joining-collections",level:3},{value:"8. $addFields - Adding New Fields",id:"8-addfields---adding-new-fields",level:3},{value:"Powerful Aggregation Operators",id:"powerful-aggregation-operators",level:2},{value:"Arithmetic Operators",id:"arithmetic-operators",level:3},{value:"String Operators",id:"string-operators",level:3},{value:"Date Operators",id:"date-operators",level:3},{value:"Conditional Operators",id:"conditional-operators",level:3},{value:"Complex Aggregation Examples",id:"complex-aggregation-examples",level:2},{value:"Example 1: Sales Analytics Dashboard",id:"example-1-sales-analytics-dashboard",level:3},{value:"Example 2: Customer Segmentation",id:"example-2-customer-segmentation",level:3},{value:"Advanced Tips and Tricks",id:"advanced-tips-and-tricks",level:2},{value:"1. Performance Optimization",id:"1-performance-optimization",level:3},{value:"2. Working with Arrays",id:"2-working-with-arrays",level:3},{value:"3. Data Type Conversions",id:"3-data-type-conversions",level:3},{value:"4. Handling Missing Data",id:"4-handling-missing-data",level:3},{value:"Advanced Transformation Techniques",id:"advanced-transformation-techniques",level:2},{value:"1. Document Reshaping",id:"1-document-reshaping",level:3},{value:"2. Creating Hierarchical Data",id:"2-creating-hierarchical-data",level:3},{value:"3. Time Series Analysis",id:"3-time-series-analysis",level:3},{value:"Common Patterns and Use Cases",id:"common-patterns-and-use-cases",level:2},{value:"1. Top N Analysis",id:"1-top-n-analysis",level:3},{value:"2. Data Validation and Cleaning",id:"2-data-validation-and-cleaning",level:3},{value:"3. Faceted Search",id:"3-faceted-search",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"1. Pipeline Design",id:"1-pipeline-design",level:3},{value:"2. Memory Management",id:"2-memory-management",level:3},{value:"3. Error Handling",id:"3-error-handling",level:3},{value:"4. Documentation",id:"4-documentation",level:3}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)("img",{src:"https://r2cdn.perplexity.ai/pplx-full-logo-primary-dark%402x.png",class:"logo",width:"120"}),"\n",(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"mongodb-aggregation-queries-complete-guidebook",children:"MongoDB Aggregation Queries: Complete Guidebook"})}),"\n",(0,r.jsx)(n.h2,{id:"what-is-mongodb-aggregation",children:"What is MongoDB Aggregation?"}),"\n",(0,r.jsxs)(n.p,{children:["MongoDB aggregation is a powerful framework for processing and transforming documents in a collection. Think of it as a ",(0,r.jsx)(n.strong,{children:"pipeline"})," where data flows through various stages, with each stage performing a specific operation on the data. Unlike simple queries that just filter and return documents, aggregation allows you to group, sort, reshape, and compute values across your entire dataset."]}),"\n",(0,r.jsx)(n.h2,{id:"the-aggregation-pipeline-concept",children:"The Aggregation Pipeline Concept"}),"\n",(0,r.jsxs)(n.p,{children:["The aggregation pipeline consists of ",(0,r.jsx)(n.strong,{children:"stages"})," that process documents sequentially. Each stage:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Takes documents as input"}),"\n",(0,r.jsx)(n.li,{children:"Performs an operation (filter, group, sort, etc.)"}),"\n",(0,r.jsx)(n.li,{children:"Passes the result to the next stage"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"db.collection.aggregate([\n  { $stage1: { /* operations */ } },\n  { $stage2: { /* operations */ } },\n  { $stage3: { /* operations */ } }\n])\n"})}),"\n",(0,r.jsx)(n.h2,{id:"core-aggregation-stages",children:"Core Aggregation Stages"}),"\n",(0,r.jsx)(n.h3,{id:"1-match---filtering-documents",children:"1. $match - Filtering Documents"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"$match"})," stage filters documents, similar to the ",(0,r.jsx)(n.code,{children:"find()"})," method. It should be placed ",(0,r.jsx)(n.strong,{children:"early"})," in the pipeline for better performance."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'// Basic filtering\ndb.sales.aggregate([\n  { $match: { status: "completed" } }\n])\n\n// Complex filtering with multiple conditions\ndb.sales.aggregate([\n  { $match: { \n    status: "completed",\n    amount: { $gte: 100 },\n    date: { $gte: ISODate("2023-01-01") }\n  }}\n])\n'})}),"\n",(0,r.jsx)(n.h3,{id:"2-project---reshaping-documents",children:"2. $project - Reshaping Documents"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"$project"})," stage selects, excludes, or transforms fields in documents."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'// Select specific fields\ndb.customers.aggregate([\n  { $project: { name: 1, email: 1, _id: 0 } }\n])\n\n// Create computed fields\ndb.sales.aggregate([\n  { $project: { \n    product: 1,\n    total: { $multiply: ["$price", "$quantity"] },\n    discountedPrice: { $subtract: ["$price", "$discount"] }\n  }}\n])\n\n// Rename fields\ndb.users.aggregate([\n  { $project: { \n    fullName: "$name",\n    userEmail: "$email",\n    registrationDate: "$createdAt"\n  }}\n])\n'})}),"\n",(0,r.jsx)(n.h3,{id:"3-group---grouping-and-aggregating",children:"3. $group - Grouping and Aggregating"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"$group"})," stage groups documents by specified fields and performs calculations."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'// Group by category and count\ndb.products.aggregate([\n  { $group: { \n    _id: "$category",\n    count: { $sum: 1 },\n    averagePrice: { $avg: "$price" }\n  }}\n])\n\n// Group by multiple fields\ndb.sales.aggregate([\n  { $group: { \n    _id: { \n      year: { $year: "$date" },\n      month: { $month: "$date" }\n    },\n    totalSales: { $sum: "$amount" },\n    orderCount: { $sum: 1 }\n  }}\n])\n\n// Group all documents (no grouping field)\ndb.orders.aggregate([\n  { $group: { \n    _id: null,\n    totalRevenue: { $sum: "$total" },\n    averageOrderValue: { $avg: "$total" },\n    maxOrder: { $max: "$total" }\n  }}\n])\n'})}),"\n",(0,r.jsx)(n.h3,{id:"4-sort---ordering-results",children:"4. $sort - Ordering Results"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"$sort"})," stage orders documents by specified fields."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// Sort by single field\ndb.products.aggregate([\n  { $sort: { price: -1 } }  // -1 for descending, 1 for ascending\n])\n\n// Sort by multiple fields\ndb.customers.aggregate([\n  { $sort: { \n    lastName: 1,\n    firstName: 1,\n    age: -1\n  }}\n])\n"})}),"\n",(0,r.jsx)(n.h3,{id:"5-limit-and-skip---pagination",children:"5. $limit and $skip - Pagination"}),"\n",(0,r.jsx)(n.p,{children:"Control the number of documents returned and implement pagination."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"// Get top 5 products by price\ndb.products.aggregate([\n  { $sort: { price: -1 } },\n  { $limit: 5 }\n])\n\n// Skip first 10 documents, then take 5 (pagination)\ndb.products.aggregate([\n  { $sort: { price: -1 } },\n  { $skip: 10 },\n  { $limit: 5 }\n])\n"})}),"\n",(0,r.jsx)(n.h2,{id:"advanced-aggregation-stages",children:"Advanced Aggregation Stages"}),"\n",(0,r.jsx)(n.h3,{id:"6-unwind---deconstructing-arrays",children:"6. $unwind - Deconstructing Arrays"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"$unwind"})," stage creates separate documents for each element in an array field."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'// Basic unwind\ndb.orders.aggregate([\n  { $unwind: "$items" }\n])\n\n// Unwind with additional options\ndb.orders.aggregate([\n  { $unwind: { \n    path: "$items",\n    includeArrayIndex: "itemIndex",\n    preserveNullAndEmptyArrays: true\n  }}\n])\n'})}),"\n",(0,r.jsx)(n.h3,{id:"7-lookup---joining-collections",children:"7. $lookup - Joining Collections"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"$lookup"})," stage performs left outer joins with other collections."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'// Basic lookup\ndb.orders.aggregate([\n  { $lookup: {\n    from: "customers",\n    localField: "customerId",\n    foreignField: "_id",\n    as: "customerInfo"\n  }}\n])\n\n// Lookup with pipeline (more complex joins)\ndb.orders.aggregate([\n  { $lookup: {\n    from: "products",\n    let: { orderItems: "$items" },\n    pipeline: [\n      { $match: { $expr: { $in: ["$_id", "$$orderItems.productId"] } } },\n      { $project: { name: 1, price: 1 } }\n    ],\n    as: "productDetails"\n  }}\n])\n'})}),"\n",(0,r.jsx)(n.h3,{id:"8-addfields---adding-new-fields",children:"8. $addFields - Adding New Fields"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"$addFields"})," stage adds new fields to documents without removing existing ones."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'db.students.aggregate([\n  { $addFields: {\n    totalScore: { $add: ["$math", "$science", "$english"] },\n    fullName: { $concat: ["$firstName", " ", "$lastName"] },\n    isHighPerformer: { $gte: ["$averageScore", 85] }\n  }}\n])\n'})}),"\n",(0,r.jsx)(n.h2,{id:"powerful-aggregation-operators",children:"Powerful Aggregation Operators"}),"\n",(0,r.jsx)(n.h3,{id:"arithmetic-operators",children:"Arithmetic Operators"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'// Mathematical operations\ndb.sales.aggregate([\n  { $project: {\n    total: { $multiply: ["$price", "$quantity"] },\n    discountAmount: { $multiply: ["$total", "$discountPercent"] },\n    finalPrice: { $subtract: ["$total", "$discountAmount"] },\n    pricePerUnit: { $divide: ["$total", "$quantity"] }\n  }}\n])\n'})}),"\n",(0,r.jsx)(n.h3,{id:"string-operators",children:"String Operators"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'// String manipulation\ndb.users.aggregate([\n  { $project: {\n    fullName: { $concat: ["$firstName", " ", "$lastName"] },\n    emailDomain: { $substr: ["$email", { $add: [{ $indexOfCP: ["$email", "@"] }, 1] }, -1] },\n    upperCaseName: { $toUpper: "$name" },\n    nameLength: { $strLenCP: "$name" }\n  }}\n])\n'})}),"\n",(0,r.jsx)(n.h3,{id:"date-operators",children:"Date Operators"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'// Date operations\ndb.orders.aggregate([\n  { $project: {\n    year: { $year: "$orderDate" },\n    month: { $month: "$orderDate" },\n    dayOfWeek: { $dayOfWeek: "$orderDate" },\n    formattedDate: { $dateToString: { \n      format: "%Y-%m-%d", \n      date: "$orderDate" \n    }}\n  }}\n])\n'})}),"\n",(0,r.jsx)(n.h3,{id:"conditional-operators",children:"Conditional Operators"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'// Conditional logic\ndb.products.aggregate([\n  { $project: {\n    name: 1,\n    price: 1,\n    priceCategory: {\n      $switch: {\n        branches: [\n          { case: { $lt: ["$price", 50] }, then: "Budget" },\n          { case: { $lt: ["$price", 200] }, then: "Mid-range" },\n          { case: { $gte: ["$price", 200] }, then: "Premium" }\n        ],\n        default: "Unknown"\n      }\n    },\n    isOnSale: { $cond: { if: { $gt: ["$discount", 0] }, then: true, else: false } }\n  }}\n])\n'})}),"\n",(0,r.jsx)(n.h2,{id:"complex-aggregation-examples",children:"Complex Aggregation Examples"}),"\n",(0,r.jsx)(n.h3,{id:"example-1-sales-analytics-dashboard",children:"Example 1: Sales Analytics Dashboard"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'// Monthly sales report with trends\ndb.sales.aggregate([\n  // Filter last 12 months\n  { $match: { \n    date: { $gte: new Date(new Date().setMonth(new Date().getMonth() - 12)) }\n  }},\n  \n  // Group by month and region\n  { $group: {\n    _id: {\n      year: { $year: "$date" },\n      month: { $month: "$date" },\n      region: "$region"\n    },\n    totalSales: { $sum: "$amount" },\n    orderCount: { $sum: 1 },\n    averageOrderValue: { $avg: "$amount" }\n  }},\n  \n  // Add computed fields\n  { $addFields: {\n    monthName: {\n      $switch: {\n        branches: [\n          { case: { $eq: ["$_id.month", 1] }, then: "January" },\n          { case: { $eq: ["$_id.month", 2] }, then: "February" },\n          // ... continue for all months\n        ]\n      }\n    }\n  }},\n  \n  // Sort by year and month\n  { $sort: { "_id.year": 1, "_id.month": 1 } }\n])\n'})}),"\n",(0,r.jsx)(n.h3,{id:"example-2-customer-segmentation",children:"Example 2: Customer Segmentation"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'// Customer lifetime value and segmentation\ndb.customers.aggregate([\n  // Join with orders\n  { $lookup: {\n    from: "orders",\n    localField: "_id",\n    foreignField: "customerId",\n    as: "orders"\n  }},\n  \n  // Add customer metrics\n  { $addFields: {\n    totalSpent: { $sum: "$orders.total" },\n    orderCount: { $size: "$orders" },\n    firstOrderDate: { $min: "$orders.date" },\n    lastOrderDate: { $max: "$orders.date" }\n  }},\n  \n  // Calculate customer lifetime value\n  { $addFields: {\n    averageOrderValue: { $divide: ["$totalSpent", "$orderCount"] },\n    customerSegment: {\n      $switch: {\n        branches: [\n          { case: { $and: [{ $gte: ["$totalSpent", 1000] }, { $gte: ["$orderCount", 5] }] }, then: "VIP" },\n          { case: { $and: [{ $gte: ["$totalSpent", 500] }, { $gte: ["$orderCount", 3] }] }, then: "Premium" },\n          { case: { $gte: ["$totalSpent", 100] }, then: "Regular" }\n        ],\n        default: "New"\n      }\n    }\n  }},\n  \n  // Group by segment for analysis\n  { $group: {\n    _id: "$customerSegment",\n    customerCount: { $sum: 1 },\n    totalRevenue: { $sum: "$totalSpent" },\n    averageLifetimeValue: { $avg: "$totalSpent" }\n  }}\n])\n'})}),"\n",(0,r.jsx)(n.h2,{id:"advanced-tips-and-tricks",children:"Advanced Tips and Tricks"}),"\n",(0,r.jsx)(n.h3,{id:"1-performance-optimization",children:"1. Performance Optimization"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Use indexes effectively:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'// Create compound index for common aggregation patterns\ndb.sales.createIndex({ "date": 1, "region": 1, "status": 1 })\n\n// Place $match early in pipeline\ndb.sales.aggregate([\n  { $match: { status: "completed" } },  // Filter first\n  { $group: { _id: "$region", total: { $sum: "$amount" } } }\n])\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Limit data early:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'// Good: Filter before processing\ndb.products.aggregate([\n  { $match: { category: "electronics" } },\n  { $sort: { price: -1 } },\n  { $limit: 10 }\n])\n'})}),"\n",(0,r.jsx)(n.h3,{id:"2-working-with-arrays",children:"2. Working with Arrays"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Array operations:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'db.orders.aggregate([\n  { $project: {\n    itemCount: { $size: "$items" },\n    hasMultipleItems: { $gt: [{ $size: "$items" }, 1] },\n    firstItem: { $arrayElemAt: ["$items", 0] },\n    expensiveItems: { $filter: {\n      input: "$items",\n      as: "item",\n      cond: { $gt: ["$$item.price", 100] }\n    }}\n  }}\n])\n'})}),"\n",(0,r.jsx)(n.h3,{id:"3-data-type-conversions",children:"3. Data Type Conversions"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'// Convert string to number, handle errors\ndb.products.aggregate([\n  { $addFields: {\n    priceAsNumber: {\n      $convert: {\n        input: "$price",\n        to: "double",\n        onError: 0,\n        onNull: 0\n      }\n    }\n  }}\n])\n'})}),"\n",(0,r.jsx)(n.h3,{id:"4-handling-missing-data",children:"4. Handling Missing Data"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'// Deal with null/missing values\ndb.users.aggregate([\n  { $project: {\n    name: 1,\n    age: { $ifNull: ["$age", 0] },\n    isActive: { $ifNull: ["$isActive", false] },\n    status: { $cond: { \n      if: { $ne: ["$lastLogin", null] }, \n      then: "active", \n      else: "inactive" \n    }}\n  }}\n])\n'})}),"\n",(0,r.jsx)(n.h2,{id:"advanced-transformation-techniques",children:"Advanced Transformation Techniques"}),"\n",(0,r.jsx)(n.h3,{id:"1-document-reshaping",children:"1. Document Reshaping"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'// Transform document structure\ndb.orders.aggregate([\n  { $project: {\n    orderInfo: {\n      id: "$_id",\n      date: "$orderDate",\n      status: "$status"\n    },\n    customer: {\n      name: "$customerName",\n      email: "$customerEmail"\n    },\n    summary: {\n      itemCount: { $size: "$items" },\n      total: "$total"\n    }\n  }}\n])\n'})}),"\n",(0,r.jsx)(n.h3,{id:"2-creating-hierarchical-data",children:"2. Creating Hierarchical Data"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'// Build category hierarchy\ndb.products.aggregate([\n  { $group: {\n    _id: "$category",\n    products: { $push: {\n      name: "$name",\n      price: "$price",\n      inStock: "$inStock"\n    }},\n    totalProducts: { $sum: 1 },\n    averagePrice: { $avg: "$price" }\n  }},\n  { $project: {\n    category: "$_id",\n    _id: 0,\n    products: 1,\n    totalProducts: 1,\n    averagePrice: { $round: ["$averagePrice", 2] }\n  }}\n])\n'})}),"\n",(0,r.jsx)(n.h3,{id:"3-time-series-analysis",children:"3. Time Series Analysis"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'// Daily sales trend with moving average\ndb.sales.aggregate([\n  { $match: { date: { $gte: new Date("2023-01-01") } } },\n  { $group: {\n    _id: { $dateToString: { format: "%Y-%m-%d", date: "$date" } },\n    dailyTotal: { $sum: "$amount" },\n    orderCount: { $sum: 1 }\n  }},\n  { $sort: { "_id": 1 } },\n  { $setWindowFields: {\n    sortBy: { "_id": 1 },\n    output: {\n      movingAverage: {\n        $avg: "$dailyTotal",\n        window: { documents: [-6, 0] }  // 7-day moving average\n      }\n    }\n  }}\n])\n'})}),"\n",(0,r.jsx)(n.h2,{id:"common-patterns-and-use-cases",children:"Common Patterns and Use Cases"}),"\n",(0,r.jsx)(n.h3,{id:"1-top-n-analysis",children:"1. Top N Analysis"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'// Top 5 customers by revenue\ndb.customers.aggregate([\n  { $lookup: {\n    from: "orders",\n    localField: "_id",\n    foreignField: "customerId",\n    as: "orders"\n  }},\n  { $project: {\n    name: 1,\n    totalSpent: { $sum: "$orders.total" }\n  }},\n  { $sort: { totalSpent: -1 } },\n  { $limit: 5 }\n])\n'})}),"\n",(0,r.jsx)(n.h3,{id:"2-data-validation-and-cleaning",children:"2. Data Validation and Cleaning"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'// Find and fix data inconsistencies\ndb.products.aggregate([\n  { $project: {\n    name: 1,\n    price: 1,\n    issues: {\n      $concatArrays: [\n        { $cond: [{ $lte: ["$price", 0] }, ["Invalid price"], []] },\n        { $cond: [{ $eq: ["$name", ""] }, ["Missing name"], []] },\n        { $cond: [{ $eq: ["$category", null] }, ["Missing category"], []] }\n      ]\n    }\n  }},\n  { $match: { issues: { $ne: [] } } }\n])\n'})}),"\n",(0,r.jsx)(n.h3,{id:"3-faceted-search",children:"3. Faceted Search"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'// Build faceted search results\ndb.products.aggregate([\n  { $match: { $text: { $search: "smartphone" } } },\n  { $facet: {\n    products: [\n      { $limit: 20 },\n      { $project: { name: 1, price: 1, rating: 1 } }\n    ],\n    priceRanges: [\n      { $bucket: {\n        groupBy: "$price",\n        boundaries: [0, 100, 300, 500, 1000],\n        default: "1000+",\n        output: { count: { $sum: 1 } }\n      }}\n    ],\n    brands: [\n      { $group: { _id: "$brand", count: { $sum: 1 } } },\n      { $sort: { count: -1 } }\n    ]\n  }}\n])\n'})}),"\n",(0,r.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,r.jsx)(n.h3,{id:"1-pipeline-design",children:"1. Pipeline Design"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Filter early"}),": Use ",(0,r.jsx)(n.code,{children:"$match"})," as early as possible"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Reduce data size"}),": Use ",(0,r.jsx)(n.code,{children:"$project"})," to include only necessary fields"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Index support"}),": Ensure your ",(0,r.jsx)(n.code,{children:"$match"})," and ",(0,r.jsx)(n.code,{children:"$sort"})," stages can use indexes"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"2-memory-management",children:"2. Memory Management"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Each stage has a 100MB memory limit"}),"\n",(0,r.jsxs)(n.li,{children:["Use ",(0,r.jsx)(n.code,{children:"allowDiskUse: true"})," for large datasets"]}),"\n",(0,r.jsx)(n.li,{children:"Consider breaking complex pipelines into smaller ones"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"3-error-handling",children:"3. Error Handling"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Use ",(0,r.jsx)(n.code,{children:"$ifNull"})," and ",(0,r.jsx)(n.code,{children:"$cond"})," for null checks"]}),"\n",(0,r.jsx)(n.li,{children:"Implement data validation in your pipeline"}),"\n",(0,r.jsx)(n.li,{children:"Test with various data scenarios"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"4-documentation",children:"4. Documentation"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Comment complex aggregations"}),"\n",(0,r.jsxs)(n.li,{children:["Use meaningful variable names in ",(0,r.jsx)(n.code,{children:"$let"})," expressions"]}),"\n",(0,r.jsx)(n.li,{children:"Document expected input/output formats"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"This comprehensive guide covers the essential aspects of MongoDB aggregation queries. Practice these patterns with your own data, and gradually build more complex pipelines as you become comfortable with the basics. Remember that aggregation is powerful but can impact performance, so always test and optimize your queries for your specific use case."})]})}function g(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>s,x:()=>o});var t=a(6540);const r={},i=t.createContext(r);function s(e){const n=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);