"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7845],{6316:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>r,default:()=>c,frontMatter:()=>s,metadata:()=>a,toc:()=>m});const a=JSON.parse('{"id":"SOLA/prompts/team_query","title":"Generate Queries from Team Metadata","description":"You are a senior MongoDB architect and prompt-engineer.","source":"@site/docs/SOLA/prompts/team_query.md","sourceDirName":"SOLA/prompts","slug":"/SOLA/prompts/team_query","permalink":"/docs/SOLA/prompts/team_query","draft":false,"unlisted":false,"editUrl":"https://github.com/yogiudev/yogiudev.github.io/tree/main/docs/SOLA/prompts/team_query.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Teams Collection Metadata","permalink":"/docs/SOLA/prompts/team_metadata"},"next":{"title":"NLP-Driven API Integration for ITSM Ticket Creatio","permalink":"/docs/SOLA/NLP-Driven API Integration for ITSM Ticket Creatio"}}');var i=t(4848),o=t(8453);const s={},r="Generate Queries from Team Metadata",l={},m=[{value:"Context",id:"context",level:2},{value:"Module IDs:",id:"module-ids",level:3},{value:"Task",id:"task",level:2},{value:"Requirements",id:"requirements",level:3}];function d(n){const e={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.header,{children:(0,i.jsx)(e.h1,{id:"generate-queries-from-team-metadata",children:"Generate Queries from Team Metadata"})}),"\n",(0,i.jsx)(e.p,{children:"You are a senior MongoDB architect and prompt-engineer."}),"\n",(0,i.jsx)(e.h2,{id:"context",children:"Context"}),"\n",(0,i.jsxs)(e.p,{children:["I have provided a MongoDB document representing a ",(0,i.jsx)(e.strong,{children:"Team"})," configuration used in ITSM modules (incident, request, change)."]}),"\n",(0,i.jsx)(e.p,{children:"Each document contains:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["Unique ",(0,i.jsx)(e.code,{children:"team_id"}),", ",(0,i.jsx)(e.code,{children:"organization"}),", and ",(0,i.jsx)(e.code,{children:"module_id"})]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"is_approval_sequence"})," flag defining sequential vs. parallel approval"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"level_staff"})," structure defining approval levels and users"]}),"\n",(0,i.jsxs)(e.li,{children:["Possible empty fields like ",(0,i.jsx)(e.code,{children:"staffs"}),", ",(0,i.jsx)(e.code,{children:"sequence_staffs"}),", which may be used if ",(0,i.jsx)(e.code,{children:"level_staff"})," is not used"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"business_hr_profile"})," indicating business hour logic for SLA-aware modules"]}),"\n"]}),"\n",(0,i.jsx)(e.h3,{id:"module-ids",children:"Module IDs:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"10"})," = Incident"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"42"})," = Request"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"47"})," = Change"]}),"\n"]}),"\n",(0,i.jsxs)(e.p,{children:["These documents control ",(0,i.jsx)(e.strong,{children:"who can approve"}),", in ",(0,i.jsx)(e.strong,{children:"what order"}),", and ",(0,i.jsx)(e.strong,{children:"how many must approve"})," based on percentage (not defined in the doc, assumed externally or by default logic)."]}),"\n",(0,i.jsx)(e.h2,{id:"task",children:"Task"}),"\n",(0,i.jsxs)(e.p,{children:["Generate a ",(0,i.jsx)(e.strong,{children:"comprehensive list of analytics and operational questions"})," that an ITSM workflow admin, reporting analyst, or compliance officer might ask regarding team configurations."]}),"\n",(0,i.jsxs)(e.p,{children:["For each natural-language question, write a matching MongoDB aggregation pipeline (MongoDB 6.x syntax) using the ",(0,i.jsx)(e.code,{children:"team"})," collection."]}),"\n",(0,i.jsx)(e.h3,{id:"requirements",children:"Requirements"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["Cover at least ",(0,i.jsx)(e.strong,{children:"15 unique questions"}),", with diversity across:","\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Approval structure insight"}),"\n",(0,i.jsx)(e.li,{children:"Organizational/team distribution"}),"\n",(0,i.jsx)(e.li,{children:"Module coverage"}),"\n",(0,i.jsx)(e.li,{children:"Notification setup"}),"\n",(0,i.jsx)(e.li,{children:"Staff participation"}),"\n",(0,i.jsx)(e.li,{children:"Sequential vs. parallel approval analysis"}),"\n",(0,i.jsx)(e.li,{children:"Level distribution"}),"\n",(0,i.jsx)(e.li,{children:"Users per level"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["Include ",(0,i.jsx)(e.strong,{children:"$project"}),", ",(0,i.jsx)(e.strong,{children:"$unwind"}),", and ",(0,i.jsx)(e.strong,{children:"$lookup"})," (if you assume other collections like users/profiles)"]}),"\n",(0,i.jsxs)(e.li,{children:["Use ",(0,i.jsx)(e.strong,{children:"stage comments"})," (",(0,i.jsx)(e.code,{children:"/* ... */"}),") for each step"]}),"\n",(0,i.jsxs)(e.li,{children:["Use ",(0,i.jsx)(e.strong,{children:"placeholders"})," like ",(0,i.jsx)(e.code,{children:"{{organization_id}}"}),", ",(0,i.jsx)(e.code,{children:"{{module_id}}"})," for dynamic filtering"]}),"\n",(0,i.jsxs)(e.li,{children:["Return a ",(0,i.jsx)(e.strong,{children:"single JSON array"}),", each element like below:"]}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-jsonc",children:'[\n  {\n    "nl_query": "Which teams in organization {{organization_id}} have sequential approval enabled?",\n    "description": "List teams within a given organization where is_approval_sequence is true.",\n    "collection": "teams",\n    "pipeline": [\n      {\n        "comment": "STEP 1: Match teams by organization and sequential approval.",\n        "stage": {\n          "$match": {\n            "organization": "{{organization_id}}",\n            "is_approval_sequence": true,\n            "is_deleted": false\n          }\n        }\n      },\n      {\n        "comment": "STEP 2: Project relevant fields.",\n        "stage": {\n          "$project": {\n            "_id": 0,\n            "team_id": 1,\n            "name": 1,\n            "module_id": 1,\n            "is_approval_sequence": 1\n          }\n        }\n      }\n    ]\n  },\n  {\n    "nl_query": "Show me the distribution of teams across different modules for organization {{organization_id}}",\n    "description": "Group teams by module_id to understand module coverage and count teams per module.",\n    "collection": "teams",\n    "pipeline": [\n      {\n        "comment": "STEP 1: Match teams by organization and exclude deleted teams.",\n        "stage": {\n          "$match": {\n            "organization": "{{organization_id}}",\n            "is_deleted": false\n          }\n        }\n      },\n      {\n        "comment": "STEP 2: Group by module_id and count teams.",\n        "stage": {\n          "$group": {\n            "_id": "$module_id",\n            "module_name": { "$first": "$module_name" },\n            "team_count": { "$sum": 1 },\n            "teams": {\n              "$push": {\n                "team_id": "$team_id",\n                "name": "$name"\n              }\n            }\n          }\n        }\n      },\n      {\n        "comment": "STEP 3: Sort by module_id for consistent ordering.",\n        "stage": {\n          "$sort": { "_id": 1 }\n        }\n      }\n    ]\n  },\n  {\n    "nl_query": "Which teams have the most approval levels configured in their level_staff structure for organization {{organization_id}}?",\n    "description": "Analyze level_staff array to find teams with the highest number of approval levels.",\n    "collection": "teams",\n    "pipeline": [\n      {\n        "comment": "STEP 1: Match active teams with level_staff configuration.",\n        "stage": {\n          "$match": {\n            "organization": "{{organization_id}}",\n            "is_deleted": false,\n            "level_staff": { "$exists": true, "$ne": [] }\n          }\n        }\n      },\n      {\n        "comment": "STEP 2: Unwind level_staff to access expertise levels.",\n        "stage": {\n          "$unwind": "$level_staff"\n        }\n      },\n      {\n        "comment": "STEP 3: Unwind expertGroupLevel to count individual levels.",\n        "stage": {\n          "$unwind": "$level_staff.expertGroupLevel"\n        }\n      },\n      {\n        "comment": "STEP 4: Group by team and count levels.",\n        "stage": {\n          "$group": {\n            "_id": "$team_id",\n            "team_name": { "$first": "$name" },\n            "module_id": { "$first": "$module_id" },\n            "organization": { "$first": "$organization" },\n            "level_count": { "$sum": 1 },\n            "levels": {\n              "$push": {\n                "level": "$level_staff.expertGroupLevel.level",\n                "level_id": "$level_staff.expertGroupLevel.level_id"\n              }\n            }\n          }\n        }\n      },\n      {\n        "comment": "STEP 5: Sort by level count in descending order.",\n        "stage": {\n          "$sort": { "level_count": -1 }\n        }\n      }\n    ]\n  },\n  {\n    "nl_query": "Find teams where approval_percent is less than 100% indicating partial approval acceptance for organization {{organization_id}}",\n    "description": "Identify teams with partial approval thresholds in their level_staff configuration.",\n    "collection": "teams",\n    "pipeline": [\n      {\n        "comment": "STEP 1: Match active teams with level_staff.",\n        "stage": {\n          "$match": {\n            "organization": "{{organization_id}}",\n            "is_deleted": false,\n            "level_staff": { "$exists": true, "$ne": [] }\n          }\n        }\n      },\n      {\n        "comment": "STEP 2: Unwind level_staff array.",\n        "stage": {\n          "$unwind": "$level_staff"\n        }\n      },\n      {\n        "comment": "STEP 3: Unwind expertGroupLevel array.",\n        "stage": {\n          "$unwind": "$level_staff.expertGroupLevel"\n        }\n      },\n      {\n        "comment": "STEP 4: Match levels with approval_percent less than 100.",\n        "stage": {\n          "$match": {\n            "level_staff.expertGroupLevel.approval_percent": { "$lt": 100 }\n          }\n        }\n      },\n      {\n        "comment": "STEP 5: Project relevant fields.",\n        "stage": {\n          "$project": {\n            "_id": 0,\n            "team_id": 1,\n            "name": 1,\n            "module_id": 1,\n            "level": "$level_staff.expertGroupLevel.level",\n            "approval_percent": "$level_staff.expertGroupLevel.approval_percent",\n            "user_count": { "$size": "$level_staff.expertGroupLevel.users" }\n          }\n        }\n      }\n    ]\n  },\n  {\n    "nl_query": "Show teams that require additional notifications (is_add_notify_required = true) for organization {{organization_id}}",\n    "description": "List teams configured to trigger additional notifications beyond standard workflow.",\n    "collection": "teams",\n    "pipeline": [\n      {\n        "comment": "STEP 1: Match teams with additional notification requirement.",\n        "stage": {\n          "$match": {\n            "organization": "{{organization_id}}",\n            "is_deleted": false,\n            "is_add_notify_required": true\n          }\n        }\n      },\n      {\n        "comment": "STEP 2: Project team details and notification settings.",\n        "stage": {\n          "$project": {\n            "_id": 0,\n            "team_id": 1,\n            "name": 1,\n            "module_id": 1,\n            "module_name": 1,\n            "organization": 1,\n            "is_add_notify_required": 1,\n            "response_required": 1\n          }\n        }\n      }\n    ]\n  },\n  {\n    "nl_query": "Which users appear in the most teams across organization {{organization_id}}?",\n    "description": "Analyze user participation across multiple teams to identify highly involved users.",\n    "collection": "teams",\n    "pipeline": [\n      {\n        "comment": "STEP 1: Match teams by organization.",\n        "stage": {\n          "$match": {\n            "organization": "{{organization_id}}",\n            "is_deleted": false\n          }\n        }\n      },\n      {\n        "comment": "STEP 2: Create a unified user array from all possible sources.",\n        "stage": {\n          "$project": {\n            "team_id": 1,\n            "name": 1,\n            "all_users": {\n              "$concatArrays": [\n                { "$ifNull": ["$owner", []] },\n                { "$ifNull": ["$staffs", []] },\n                {\n                  "$reduce": {\n                    "input": { "$ifNull": ["$sequence_staffs", []] },\n                    "initialValue": [],\n                    "in": { "$concatArrays": ["$$value", "$$this.users"] }\n                  }\n                },\n                {\n                  "$reduce": {\n                    "input": { "$ifNull": ["$level_staff", []] },\n                    "initialValue": [],\n                    "in": {\n                      "$concatArrays": [\n                        "$$value",\n                        {\n                          "$reduce": {\n                            "input": "$$this.expertGroupLevel",\n                            "initialValue": [],\n                            "in": { "$concatArrays": ["$$value", "$$this.users"] }\n                          }\n                        }\n                      ]\n                    }\n                  }\n                }\n              ]\n            }\n          }\n        }\n      },\n      {\n        "comment": "STEP 3: Unwind the combined user array.",\n        "stage": {\n          "$unwind": "$all_users"\n        }\n      },\n      {\n        "comment": "STEP 4: Group by user to count team participation.",\n        "stage": {\n          "$group": {\n            "_id": "$all_users.profile_id",\n            "full_name": { "$first": "$all_users.full_name" },\n            "email": { "$first": "$all_users.email" },\n            "team_count": { "$sum": 1 },\n            "teams": {\n              "$push": {\n                "team_id": "$team_id",\n                "team_name": "$name"\n              }\n            }\n          }\n        }\n      },\n      {\n        "comment": "STEP 5: Sort by team participation count.",\n        "stage": {\n          "$sort": { "team_count": -1 }\n        }\n      }\n    ]\n  },\n  {\n    "nl_query": "Find teams with individual staff selection type that have empty staffs array for organization {{organization_id}}",\n    "description": "Identify potential configuration issues where individual selection is enabled but no staff assigned.",\n    "collection": "teams",\n    "pipeline": [\n      {\n        "comment": "STEP 1: Match teams with individual selection but empty staffs.",\n        "stage": {\n          "$match": {\n            "organization": "{{organization_id}}",\n            "is_deleted": false,\n            "staff_selection_type": "individual",\n            "$or": [\n              { "staffs": { "$exists": false } },\n              { "staffs": { "$eq": [] } }\n            ]\n          }\n        }\n      },\n      {\n        "comment": "STEP 2: Project relevant configuration details.",\n        "stage": {\n          "$project": {\n            "_id": 0,\n            "team_id": 1,\n            "name": 1,\n            "module_id": 1,\n            "staff_selection_type": 1,\n            "has_level_staff": { "$ne": ["$level_staff", []] },\n            "has_sequence_staff": { "$ne": ["$sequence_staffs", []] },\n            "is_approval_sequence": 1\n          }\n        }\n      }\n    ]\n  },\n  {\n    "nl_query": "Show teams configured with business hour profiles for module {{module_id}} in organization {{organization_id}}",\n    "description": "List teams that have business hour profiles configured for SLA-aware processing.",\n    "collection": "teams",\n    "pipeline": [\n      {\n        "comment": "STEP 1: Match teams by module and organization with business hour profile.",\n        "stage": {\n          "$match": {\n            "organization": "{{organization_id}}",\n            "module_id": "{{module_id}}",\n            "is_deleted": false,\n            "business_hr_profile": { "$exists": true, "$ne": null }\n          }\n        }\n      },\n      {\n        "comment": "STEP 2: Project team and business hour details.",\n        "stage": {\n          "$project": {\n            "_id": 0,\n            "team_id": 1,\n            "name": 1,\n            "organization": 1,\n            "business_hr_profile": 1,\n            "response_required": 1\n          }\n        }\n      }\n    ]\n  },\n  {\n    "nl_query": "Which teams have rule-based assignment configuration enabled for organization {{organization_id}}?",\n    "description": "Identify teams with automated assignment rules configured in their config object.",\n    "collection": "teams",\n    "pipeline": [\n      {\n        "comment": "STEP 1: Match teams with rule assignment enabled.",\n        "stage": {\n          "$match": {\n            "organization": "{{organization_id}}",\n            "is_deleted": false,\n            "config.is_rule_assigned": true\n          }\n        }\n      },\n      {\n        "comment": "STEP 2: Project team and rule configuration.",\n        "stage": {\n          "$project": {\n            "_id": 0,\n            "team_id": 1,\n            "name": 1,\n            "module_id": 1,\n            "organization": 1,\n            "rule_config": {\n              "rule_id": "$config.rule_id",\n              "rule_type": "$config.rule_type",\n              "is_rule_assigned": "$config.is_rule_assigned"\n            }\n          }\n        }\n      }\n    ]\n  },\n  {\n    "nl_query": "Find teams where notify_mail or notify_phone arrays are configured at approval levels for organization {{organization_id}}",\n    "description": "Identify teams with notification channels configured for specific approval levels.",\n    "collection": "teams",\n    "pipeline": [\n      {\n        "comment": "STEP 1: Match teams with level_staff configuration.",\n        "stage": {\n          "$match": {\n            "organization": "{{organization_id}}",\n            "is_deleted": false,\n            "level_staff": { "$exists": true, "$ne": [] }\n          }\n        }\n      },\n      {\n        "comment": "STEP 2: Unwind level_staff array.",\n        "stage": {\n          "$unwind": "$level_staff"\n        }\n      },\n      {\n        "comment": "STEP 3: Unwind expertGroupLevel array.",\n        "stage": {\n          "$unwind": "$level_staff.expertGroupLevel"\n        }\n      },\n      {\n        "comment": "STEP 4: Match levels with notification channels.",\n        "stage": {\n          "$match": {\n            "$or": [\n              { "level_staff.expertGroupLevel.notify_mail": { "$exists": true, "$ne": [] } },\n              { "level_staff.expertGroupLevel.notify_phone": { "$exists": true, "$ne": [] } }\n            ]\n          }\n        }\n      },\n      {\n        "comment": "STEP 5: Project notification details.",\n        "stage": {\n          "$project": {\n            "_id": 0,\n            "team_id": 1,\n            "name": 1,\n            "module_id": 1,\n            "level": "$level_staff.expertGroupLevel.level",\n            "notify_mail": "$level_staff.expertGroupLevel.notify_mail",\n            "notify_phone": "$level_staff.expertGroupLevel.notify_phone"\n          }\n        }\n      }\n    ]\n  },\n  {\n    "nl_query": "Show the average number of users per approval level across all teams for organization {{organization_id}}",\n    "description": "Calculate statistics on user distribution across approval levels to understand team sizing.",\n    "collection": "teams",\n    "pipeline": [\n      {\n        "comment": "STEP 1: Match active teams with level_staff.",\n        "stage": {\n          "$match": {\n            "organization": "{{organization_id}}",\n            "is_deleted": false,\n            "level_staff": { "$exists": true, "$ne": [] }\n          }\n        }\n      },\n      {\n        "comment": "STEP 2: Unwind level_staff array.",\n        "stage": {\n          "$unwind": "$level_staff"\n        }\n      },\n      {\n        "comment": "STEP 3: Unwind expertGroupLevel array.",\n        "stage": {\n          "$unwind": "$level_staff.expertGroupLevel"\n        }\n      },\n      {\n        "comment": "STEP 4: Calculate user count per level.",\n        "stage": {\n          "$project": {\n            "team_id": 1,\n            "level": "$level_staff.expertGroupLevel.level",\n            "user_count": { "$size": "$level_staff.expertGroupLevel.users" }\n          }\n        }\n      },\n      {\n        "comment": "STEP 5: Group by level and calculate statistics.",\n        "stage": {\n          "$group": {\n            "_id": "$level",\n            "avg_users": { "$avg": "$user_count" },\n            "min_users": { "$min": "$user_count" },\n            "max_users": { "$max": "$user_count" },\n            "total_teams": { "$sum": 1 }\n          }\n        }\n      },\n      {\n        "comment": "STEP 6: Sort by level for consistent ordering.",\n        "stage": {\n          "$sort": { "_id": 1 }\n        }\n      }\n    ]\n  },\n  {\n    "nl_query": "Which teams are configured as preconfigured/system-generated teams for organization {{organization_id}}?",\n    "description": "List teams that are marked as system-generated or preconfigured templates.",\n    "collection": "teams",\n    "pipeline": [\n      {\n        "comment": "STEP 1: Match preconfigured teams.",\n        "stage": {\n          "$match": {\n            "organization": "{{organization_id}}",\n            "is_deleted": false,\n            "is_preconfigure": true\n          }\n        }\n      },\n      {\n        "comment": "STEP 2: Project team details.",\n        "stage": {\n          "$project": {\n            "_id": 0,\n            "team_id": 1,\n            "name": 1,\n            "module_id": 1,\n            "module_name": 1,\n            "organization": 1,\n            "is_preconfigure": 1,\n            "creation_time": 1\n          }\n        }\n      }\n    ]\n  },\n  {\n    "nl_query": "Find teams with asset_tags configured for asset-based assignment in organization {{organization_id}}",\n    "description": "Identify teams that have asset tags configured for asset ownership or scope-based routing.",\n    "collection": "teams",\n    "pipeline": [\n      {\n        "comment": "STEP 1: Match teams with asset tags.",\n        "stage": {\n          "$match": {\n            "organization": "{{organization_id}}",\n            "is_deleted": false,\n            "asset_tags": { "$exists": true, "$ne": [] }\n          }\n        }\n      },\n      {\n        "comment": "STEP 2: Project team and asset tag details.",\n        "stage": {\n          "$project": {\n            "_id": 0,\n            "team_id": 1,\n            "name": 1,\n            "module_id": 1,\n            "organization": 1,\n            "asset_tags": 1,\n            "tags": 1\n          }\n        }\n      }\n    ]\n  },\n  {\n    "nl_query": "Show teams where response_required is true but no approval sequence is configured for organization {{organization_id}}",\n    "description": "Identify potential configuration issues where response is required but approval flow is unclear.",\n    "collection": "teams",\n    "pipeline": [\n      {\n        "comment": "STEP 1: Match teams requiring response.",\n        "stage": {\n          "$match": {\n            "organization": "{{organization_id}}",\n            "is_deleted": false,\n            "response_required": true\n          }\n        }\n      },\n      {\n        "comment": "STEP 2: Check for missing approval configuration.",\n        "stage": {\n          "$match": {\n            "$and": [\n              {\n                "$or": [\n                  { "is_approval_sequence": false },\n                  { "is_approval_sequence": { "$exists": false } }\n                ]\n              },\n              {\n                "$or": [\n                  { "level_staff": { "$eq": [] } },\n                  { "level_staff": { "$exists": false } }\n                ]\n              },\n              {\n                "$or": [\n                  { "staffs": { "$eq": [] } },\n                  { "staffs": { "$exists": false } }\n                ]\n              }\n            ]\n          }\n        }\n      },\n      {\n        "comment": "STEP 3: Project problematic configuration.",\n        "stage": {\n          "$project": {\n            "_id": 0,\n            "team_id": 1,\n            "name": 1,\n            "module_id": 1,\n            "response_required": 1,\n            "is_approval_sequence": 1,\n            "has_level_staff": { "$ne": ["$level_staff", []] },\n            "has_staffs": { "$ne": ["$staffs", []] }\n          }\n        }\n      }\n    ]\n  },\n  {\n    "nl_query": "Find teams created in the last 30 days for organization {{organization_id}}",\n    "description": "List recently created teams to track team configuration changes and additions.",\n    "collection": "teams",\n    "pipeline": [\n      {\n        "comment": "STEP 1: Match teams by organization and recent creation.",\n        "stage": {\n          "$match": {\n            "organization": "{{organization_id}}",\n            "is_deleted": false,\n            "creation_time": {\n              "$gte": { "$dateSubtract": { "startDate": "$$NOW", "unit": "day", "amount": 30 } }\n            }\n          }\n        }\n      },\n      {\n        "comment": "STEP 2: Project team details with creation info.",\n        "stage": {\n          "$project": {\n            "_id": 0,\n            "team_id": 1,\n            "name": 1,\n            "module_id": 1,\n            "module_name": 1,\n            "creation_time": 1,\n            "staff_selection_type": 1,\n            "is_approval_sequence": 1\n          }\n        }\n      },\n      {\n        "comment": "STEP 3: Sort by creation time descending.",\n        "stage": {\n          "$sort": { "creation_time": -1 }\n        }\n      }\n    ]\n  },\n  {\n    "nl_query": "Show teams grouped by group_type with counts for organization {{organization_id}}",\n    "description": "Analyze team organization by group type (Department, Location, Function) to understand team structure.",\n    "collection": "teams",\n    "pipeline": [\n      {\n        "comment": "STEP 1: Match active teams with group_type.",\n        "stage": {\n          "$match": {\n            "organization": "{{organization_id}}",\n            "is_deleted": false,\n            "group_type": { "$exists": true, "$ne": null }\n          }\n        }\n      },\n      {\n        "comment": "STEP 2: Group by group_type and count.",\n        "stage": {\n          "$group": {\n            "_id": "$group_type",\n            "team_count": { "$sum": 1 },\n            "teams": {\n              "$push": {\n                "team_id": "$team_id",\n                "name": "$name",\n                "module_id": "$module_id"\n              }\n            }\n          }\n        }\n      },\n      {\n        "comment": "STEP 3: Sort by team count descending.",\n        "stage": {\n          "$sort": { "team_count": -1 }\n        }\n      }\n    ]\n  },\n  {\n    "nl_query": "Find teams with location-based configuration for specific location category {{location_category}} in organization {{organization_id}}",\n    "description": "Identify teams configured for specific location categories for geographic routing.",\n    "collection": "teams",\n    "pipeline": [\n      {\n        "comment": "STEP 1: Match teams with specific location category.",\n        "stage": {\n          "$match": {\n            "organization": "{{organization_id}}",\n            "is_deleted": false,\n            "location.location_category": "{{location_category}}"\n          }\n        }\n      },\n      {\n        "comment": "STEP 2: Project team and location details.",\n        "stage": {\n          "$project": {\n            "_id": 0,\n            "team_id": 1,\n            "name": 1,\n            "module_id": 1,\n            "organization": 1,\n            "location": 1\n          }\n        }\n      }\n    ]\n  },\n  {\n    "nl_query": "Which teams have event threshold rules configured for organization {{organization_id}}?",\n    "description": "List teams with event threshold rules for notifications or metrics monitoring.",\n    "collection": "teams",\n    "pipeline": [\n      {\n        "comment": "STEP 1: Match teams with event threshold rules.",\n        "stage": {\n          "$match": {\n            "organization": "{{organization_id}}",\n            "is_deleted": false,\n            "events_thres_id": { "$exists": true, "$ne": [] }\n          }\n        }\n      },\n      {\n        "comment": "STEP 2: Project team and threshold details.",\n        "stage": {\n          "$project": {\n            "_id": 0,\n            "team_id": 1,\n            "name": 1,\n            "module_id": 1,\n            "organization": 1,\n            "events_thres_id": 1,\n            "threshold_count": { "$size": "$events_thres_id" }\n          }\n        }\n      }\n    ]\n  },\n  {\n    "nl_query": "Compare sequential vs parallel approval team configurations across modules for organization {{organization_id}}",\n    "description": "Analyze the distribution of approval types across different ITSM modules.",\n    "collection": "teams",\n    "pipeline": [\n      {\n        "comment": "STEP 1: Match active teams.",\n        "stage": {\n          "$match": {\n            "organization": "{{organization_id}}",\n            "is_deleted": false\n          }\n        }\n      },\n      {\n        "comment": "STEP 2: Group by module and approval type.",\n        "stage": {\n          "$group": {\n            "_id": {\n              "module_id": "$module_id",\n              "module_name": "$module_name",\n              "is_approval_sequence": "$is_approval_sequence"\n            },\n            "team_count": { "$sum": 1 },\n            "teams": {\n              "$push": {\n                "team_id": "$team_id",\n                "name": "$name"\n              }\n            }\n          }\n        }\n      },\n      {\n        "comment": "STEP 3: Reshape for better analysis.",\n        "stage": {\n          "$group": {\n            "_id": {\n              "module_id": "$_id.module_id",\n              "module_name": "$_id.module_name"\n            },\n            "sequential_count": {\n              "$sum": {\n                "$cond": [{ "$eq": ["$_id.is_approval_sequence", true] }, "$team_count", 0]\n              }\n            },\n            "parallel_count": {\n              "$sum": {\n                "$cond": [{ "$eq": ["$_id.is_approval_sequence", false] }, "$team_count", 0]\n              }\n            },\n            "total_teams": { "$sum": "$team_count" }\n          }\n        }\n      },\n      {\n        "comment": "STEP 4: Sort by module_id.",\n        "stage": {\n          "$sort": { "_id.module_id": 1 }\n        }\n      }\n    ]\n  },\n  {\n    "nl_query": "Find teams with the highest number of total users across all approval levels for organization {{organization_id}}",\n    "description": "Calculate total user count across all approval structures to identify largest teams.",\n    "collection": "teams",\n    "pipeline": [\n      {\n        "comment": "STEP 1: Match active teams.",\n        "stage": {\n          "$match": {\n            "organization": "{{organization_id}}",\n            "is_deleted": false\n          }\n        }\n      },\n      {\n        "comment": "STEP 2: Calculate total user count from all sources.",\n        "stage": {\n          "$project": {\n            "team_id": 1,\n            "name": 1,\n            "module_id": 1,\n            "organization": 1,\n            "total_users": {\n              "$add": [\n                { "$size": { "$ifNull": ["$owner", []] } },\n                { "$size": { "$ifNull": ["$staffs", []] } },\n                {\n                  "$reduce": {\n                    "input": { "$ifNull": ["$sequence_staffs", []] },\n                    "initialValue": 0,\n                    "in": { "$add": ["$$value", { "$size": "$$this.users" }] }\n                  }\n                },\n                {\n                  "$reduce": {\n                    "input": { "$ifNull": ["$level_staff", []] },\n                    "initialValue": 0,\n                    "in": {\n                      "$add": [\n                        "$$value",\n                        {\n                          "$reduce": {\n                            "input": "$$this.expertGroupLevel",\n                            "initialValue": 0,\n                            "in": { "$add": ["$$value", { "$size": "$$this.users" }] }\n                          }\n                        }\n                      ]\n                    }\n                  }\n                }\n              ]\n            }\n          }\n        }\n      },\n      {\n        "comment": "STEP 3: Sort by total users descending.",\n        "stage": {\n          "$sort": { "total_users": -1 }\n        }\n      },\n      {\n        "comment": "STEP 4: Limit to top 10 teams.",\n        "stage": {\n          "$limit": 10\n        }\n      }\n    ]\n  },\n  {\n    "nl_query": "Which teams in organization {{organization_id}} have approval_percent less than 100% across all their approval levels?",\n    "description": "Identify teams with partial approval thresholds configured in their hierarchical approval structure.",\n    "collection": "team",\n    "pipeline": [\n      {\n        "comment": "STEP 1: Match teams by organization.",\n        "stage": {\n          "$match": {\n            "organization": "{{organization_id}}",\n            "is_deleted": false,\n            "level_staff": { "$exists": true, "$ne": [] }\n          }\n        }\n      },\n      {\n        "comment": "STEP 2: Unwind level_staff array.",\n        "stage": {\n          "$unwind": "$level_staff"\n        }\n      },\n      {\n        "comment": "STEP 3: Unwind expertGroupLevel array.",\n        "stage": {\n          "$unwind": "$level_staff.expertGroupLevel"\n        }\n      },\n      {\n        "comment": "STEP 4: Filter levels with partial approval percentages.",\n        "stage": {\n          "$match": {\n            "level_staff.expertGroupLevel.approval_percent": { "$lt": 100 }\n          }\n        }\n      },\n      {\n        "comment": "STEP 5: Group back by team to show all partial levels.",\n        "stage": {\n          "$group": {\n            "_id": "$team_id",\n            "team_name": { "$first": "$name" },\n            "module_id": { "$first": "$module_id" },\n            "partial_levels": {\n              "$push": {\n                "level": "$level_staff.expertGroupLevel.level",\n                "approval_percent": "$level_staff.expertGroupLevel.approval_percent",\n                "user_count": { "$size": "$level_staff.expertGroupLevel.users" }\n              }\n            }\n          }\n        }\n      }\n    ]\n  },\n  {\n    "nl_query": "Show teams in organization {{organization_id}} that have been updated in the last 7 days",\n    "description": "Track recent team configuration changes for audit and monitoring purposes.",\n    "collection": "team",\n    "pipeline": [\n      {\n        "comment": "STEP 1: Match teams by organization and recent updates.",\n        "stage": {\n          "$match": {\n            "organization": "{{organization_id}}",\n            "is_deleted": false,\n            "last_update_time": {\n              "$gte": { "$dateSubtract": { "startDate": "$$NOW", "unit": "day", "amount": 7 } }\n            }\n          }\n        }\n      },\n      {\n        "comment": "STEP 2: Project relevant fields with update info.",\n        "stage": {\n          "$project": {\n            "_id": 0,\n            "team_id": 1,\n            "name": 1,\n            "module_id": 1,\n            "module_name": 1,\n            "last_update_time": 1,\n            "creation_time": 1,\n            "is_preconfigure": 1\n          }\n        }\n      },\n      {\n        "comment": "STEP 3: Sort by last update time descending.",\n        "stage": {\n          "$sort": { "last_update_time": -1 }\n        }\n      }\n    ]\n  },\n  {\n    "nl_query": "Find teams in organization {{organization_id}} with empty owner arrays",\n    "description": "Identify teams that lack proper ownership assignment for governance compliance.",\n    "collection": "team",\n    "pipeline": [\n      {\n        "comment": "STEP 1: Match teams by organization with empty or missing owners.",\n        "stage": {\n          "$match": {\n            "organization": "{{organization_id}}",\n            "is_deleted": false,\n            "$or": [\n              { "owner": { "$exists": false } },\n              { "owner": { "$eq": [] } }\n            ]\n          }\n        }\n      },\n      {\n        "comment": "STEP 2: Project team details for review.",\n        "stage": {\n          "$project": {\n            "_id": 0,\n            "team_id": 1,\n            "name": 1,\n            "module_id": 1,\n            "module_name": 1,\n            "group_type": 1,\n            "staff_selection_type": 1,\n            "has_staffs": { "$ne": ["$staffs", []] },\n            "has_level_staff": { "$ne": ["$level_staff", []] }\n          }\n        }\n      }\n    ]\n  },\n  {\n    "nl_query": "Show teams in organization {{organization_id}} grouped by staff_selection_type with approval configuration analysis",\n    "description": "Analyze how different staff selection types correlate with approval configurations.",\n    "collection": "team",\n    "pipeline": [\n      {\n        "comment": "STEP 1: Match teams by organization.",\n        "stage": {\n          "$match": {\n            "organization": "{{organization_id}}",\n            "is_deleted": false\n          }\n        }\n      },\n      {\n        "comment": "STEP 2: Group by staff selection type.",\n        "stage": {\n          "$group": {\n            "_id": "$staff_selection_type",\n            "total_teams": { "$sum": 1 },\n            "sequential_approval_count": {\n              "$sum": { "$cond": [{ "$eq": ["$is_approval_sequence", true] }, 1, 0] }\n            },\n            "parallel_approval_count": {\n              "$sum": { "$cond": [{ "$eq": ["$is_approval_sequence", false] }, 1, 0] }\n            },\n            "response_required_count": {\n              "$sum": { "$cond": [{ "$eq": ["$response_required", true] }, 1, 0] }\n            },\n            "teams": {\n              "$push": {\n                "team_id": "$team_id",\n                "name": "$name",\n                "module_id": "$module_id"\n              }\n            }\n          }\n        }\n      },\n      {\n        "comment": "STEP 3: Calculate percentages.",\n        "stage": {\n          "$project": {\n            "_id": 1,\n            "total_teams": 1,\n            "sequential_approval_count": 1,\n            "parallel_approval_count": 1,\n            "response_required_count": 1,\n            "sequential_percentage": {\n              "$multiply": [\n                { "$divide": ["$sequential_approval_count", "$total_teams"] },\n                100\n              ]\n            },\n            "response_required_percentage": {\n              "$multiply": [\n                { "$divide": ["$response_required_count", "$total_teams"] },\n                100\n              ]\n            }\n          }\n        }\n      }\n    ]\n  },\n  {\n    "nl_query": "Find teams in organization {{organization_id}} with notify_mail or notify_phone configured but no users in those approval levels",\n    "description": "Identify potential configuration issues where notifications are set but no approvers exist.",\n    "collection": "team",\n    "pipeline": [\n      {\n        "comment": "STEP 1: Match teams by organization with level_staff.",\n        "stage": {\n          "$match": {\n            "organization": "{{organization_id}}",\n            "is_deleted": false,\n            "level_staff": { "$exists": true, "$ne": [] }\n          }\n        }\n      },\n      {\n        "comment": "STEP 2: Unwind level_staff array.",\n        "stage": {\n          "$unwind": "$level_staff"\n        }\n      },\n      {\n        "comment": "STEP 3: Unwind expertGroupLevel array.",\n        "stage": {\n          "$unwind": "$level_staff.expertGroupLevel"\n        }\n      },\n      {\n        "comment": "STEP 4: Find levels with notifications but no users.",\n        "stage": {\n          "$match": {\n            "$and": [\n              {\n                "$or": [\n                  { "level_staff.expertGroupLevel.notify_mail": { "$exists": true, "$ne": [] } },\n                  { "level_staff.expertGroupLevel.notify_phone": { "$exists": true, "$ne": [] } }\n                ]\n              },\n              {\n                "$or": [\n                  { "level_staff.expertGroupLevel.users": { "$eq": [] } },\n                  { "level_staff.expertGroupLevel.users": { "$exists": false } }\n                ]\n              }\n            ]\n          }\n        }\n      },\n      {\n        "comment": "STEP 5: Project problematic configurations.",\n        "stage": {\n          "$project": {\n            "_id": 0,\n            "team_id": 1,\n            "name": 1,\n            "module_id": 1,\n            "level": "$level_staff.expertGroupLevel.level",\n            "has_notify_mail": { "$ne": ["$level_staff.expertGroupLevel.notify_mail", []] },\n            "has_notify_phone": { "$ne": ["$level_staff.expertGroupLevel.notify_phone", []] },\n            "user_count": { "$size": { "$ifNull": ["$level_staff.expertGroupLevel.users", []] } }\n          }\n        }\n      }\n    ]\n  },\n  {\n    "nl_query": "Show approval request completion rates by team for organization {{organization_id}} in the last 30 days",\n    "description": "Analyze team performance in completing approval requests using both collections.",\n    "collection": "approval",\n    "pipeline": [\n      {\n        "comment": "STEP 1: Match recent approval requests by organization.",\n        "stage": {\n          "$match": {\n            "organization": "{{organization_id}}",\n            "is_deleted": false,\n            "creation_date": {\n              "$gte": { "$dateSubtract": { "startDate": "$$NOW", "unit": "day", "amount": 30 } }\n            }\n          }\n        }\n      },\n      {\n        "comment": "STEP 2: Group by team and calculate completion stats.",\n        "stage": {\n          "$group": {\n            "_id": "$approval_team.team_id",\n            "total_requests": { "$sum": 1 },\n            "completed_requests": {\n              "$sum": { "$cond": [{ "$eq": ["$is_approval_completed", true] }, 1, 0] }\n            },\n            "approved_requests": {\n              "$sum": { "$cond": [{ "$eq": ["$overall_approval_state", 1] }, 1, 0] }\n            },\n            "rejected_requests": {\n              "$sum": { "$cond": [{ "$eq": ["$overall_approval_state", 2] }, 1, 0] }\n            },\n            "pending_requests": {\n              "$sum": { "$cond": [{ "$eq": ["$overall_approval_state", 0] }, 1, 0] }\n            }\n          }\n        }\n      },\n      {\n        "comment": "STEP 3: Lookup team details.",\n        "stage": {\n          "$lookup": {\n            "from": "team",\n            "localField": "_id",\n            "foreignField": "team_id",\n            "as": "team_info"\n          }\n        }\n      },\n      {\n        "comment": "STEP 4: Unwind team info and calculate rates.",\n        "stage": {\n          "$unwind": "$team_info"\n        }\n      },\n      {\n        "comment": "STEP 5: Calculate completion and approval rates.",\n        "stage": {\n          "$project": {\n            "_id": 0,\n            "team_id": "$_id",\n            "team_name": "$team_info.name",\n            "module_id": "$team_info.module_id",\n            "total_requests": 1,\n            "completed_requests": 1,\n            "approved_requests": 1,\n            "rejected_requests": 1,\n            "pending_requests": 1,\n            "completion_rate": {\n              "$multiply": [\n                { "$divide": ["$completed_requests", "$total_requests"] },\n                100\n              ]\n            },\n            "approval_rate": {\n              "$multiply": [\n                { "$divide": ["$approved_requests", "$total_requests"] },\n                100\n              ]\n            }\n          }\n        }\n      }\n    ]\n  },\n  {\n    "nl_query": "Find teams in organization {{organization_id}} with expertise-based level_staff configuration",\n    "description": "Identify teams using expertise-based approval levels and their expertise categories.",\n    "collection": "team",\n    "pipeline": [\n      {\n        "comment": "STEP 1: Match teams by organization with level_staff.",\n        "stage": {\n          "$match": {\n            "organization": "{{organization_id}}",\n            "is_deleted": false,\n            "level_staff": { "$exists": true, "$ne": [] }\n          }\n        }\n      },\n      {\n        "comment": "STEP 2: Unwind level_staff to analyze expertise.",\n        "stage": {\n          "$unwind": "$level_staff"\n        }\n      },\n      {\n        "comment": "STEP 3: Filter teams with defined expertise.",\n        "stage": {\n          "$match": {\n            "level_staff.expertise": { "$exists": true, "$ne": null, "$ne": "" }\n          }\n        }\n      },\n      {\n        "comment": "STEP 4: Group by team and collect expertise info.",\n        "stage": {\n          "$group": {\n            "_id": "$team_id",\n            "team_name": { "$first": "$name" },\n            "module_id": { "$first": "$module_id" },\n            "module_name": { "$first": "$module_name" },\n            "expertise_areas": {\n              "$push": {\n                "expertise_id": "$level_staff.expertise_id",\n                "expertise": "$level_staff.expertise",\n                "level_count": { "$size": "$level_staff.expertGroupLevel" }\n              }\n            },\n            "total_expertise_areas": { "$sum": 1 }\n          }\n        }\n      },\n      {\n        "comment": "STEP 5: Sort by expertise area count.",\n        "stage": {\n          "$sort": { "total_expertise_areas": -1 }\n        }\n      }\n    ]\n  },\n  {\n    "nl_query": "Show teams in organization {{organization_id}} with location-based configuration and their geographic distribution",\n    "description": "Analyze teams with location settings to understand geographic team distribution.",\n    "collection": "team",\n    "pipeline": [\n      {\n        "comment": "STEP 1: Match teams by organization with location data.",\n        "stage": {\n          "$match": {\n            "organization": "{{organization_id}}",\n            "is_deleted": false,\n            "location": { "$exists": true, "$ne": null }\n          }\n        }\n      },\n      {\n        "comment": "STEP 2: Unwind location values if it\'s an array.",\n        "stage": {\n          "$unwind": {\n            "path": "$location.value",\n            "preserveNullAndEmptyArrays": true\n          }\n        }\n      },\n      {\n        "comment": "STEP 3: Group by location category.",\n        "stage": {\n          "$group": {\n            "_id": {\n              "location_category": "$location.location_category",\n              "location_value": "$location.value"\n            },\n            "team_count": { "$sum": 1 },\n            "teams": {\n              "$push": {\n                "team_id": "$team_id",\n                "name": "$name",\n                "module_id": "$module_id"\n              }\n            }\n          }\n        }\n      },\n      {\n        "comment": "STEP 4: Group by category to get distribution.",\n        "stage": {\n          "$group": {\n            "_id": "$_id.location_category",\n            "total_teams": { "$sum": "$team_count" },\n            "locations": {\n              "$push": {\n                "location_value": "$_id.location_value",\n                "team_count": "$team_count",\n                "teams": "$teams"\n              }\n            }\n          }\n        }\n      }\n    ]\n  },\n  {\n    "nl_query": "Find teams in organization {{organization_id}} where approval_sequence is true but sequence_staffs is empty",\n    "description": "Identify configuration inconsistencies where sequential approval is enabled but no sequence is defined.",\n    "collection": "team",\n    "pipeline": [\n      {\n        "comment": "STEP 1: Match teams with sequential approval enabled.",\n        "stage": {\n          "$match": {\n            "organization": "{{organization_id}}",\n            "is_deleted": false,\n            "is_approval_sequence": true\n          }\n        }\n      },\n      {\n        "comment": "STEP 2: Filter teams with empty sequence_staffs.",\n        "stage": {\n          "$match": {\n            "$or": [\n              { "sequence_staffs": { "$exists": false } },\n              { "sequence_staffs": { "$eq": [] } }\n            ]\n          }\n        }\n      },\n      {\n        "comment": "STEP 3: Project configuration issue details.",\n        "stage": {\n          "$project": {\n            "_id": 0,\n            "team_id": 1,\n            "name": 1,\n            "module_id": 1,\n            "module_name": 1,\n            "is_approval_sequence": 1,\n            "has_level_staff": { "$ne": ["$level_staff", []] },\n            "has_staffs": { "$ne": ["$staffs", []] },\n            "response_required": 1\n          }\n        }\n      }\n    ]\n  },\n  {\n    "nl_query": "Show teams in organization {{organization_id}} with the highest number of approval sequences configured",\n    "description": "Identify teams with the most complex sequential approval workflows.",\n    "collection": "team",\n    "pipeline": [\n      {\n        "comment": "STEP 1: Match teams by organization with sequence_staffs.",\n        "stage": {\n          "$match": {\n            "organization": "{{organization_id}}",\n            "is_deleted": false,\n            "sequence_staffs": { "$exists": true, "$ne": [] }\n          }\n        }\n      },\n      {\n        "comment": "STEP 2: Calculate sequence count and user totals.",\n        "stage": {\n          "$project": {\n            "team_id": 1,\n            "name": 1,\n            "module_id": 1,\n            "module_name": 1,\n            "sequence_count": { "$size": "$sequence_staffs" },\n            "total_sequence_users": {\n              "$reduce": {\n                "input": "$sequence_staffs",\n                "initialValue": 0,\n                "in": { "$add": ["$$value", { "$size": "$$this.users" }] }\n              }\n            },\n            "sequence_details": {\n              "$map": {\n                "input": "$sequence_staffs",\n                "as": "seq",\n                "in": {\n                  "sequence": "$$seq.sequence",\n                  "user_count": { "$size": "$$seq.users" },\n                  "approval_percent": "$$seq.approval_percent"\n                }\n              }\n            }\n          }\n        }\n      },\n      {\n        "comment": "STEP 3: Sort by sequence count descending.",\n        "stage": {\n          "$sort": { "sequence_count": -1 }\n        }\n      },\n      {\n        "comment": "STEP 4: Limit to top 10 teams.",\n        "stage": {\n          "$limit": 10\n        }\n      }\n    ]\n  },\n  {\n    "nl_query": "Find teams in organization {{organization_id}} with both asset_tags and tags configured",\n    "description": "Identify teams with comprehensive tagging for both asset management and general categorization.",\n    "collection": "team",\n    "pipeline": [\n      {\n        "comment": "STEP 1: Match teams by organization with both tag types.",\n        "stage": {\n          "$match": {\n            "organization": "{{organization_id}}",\n            "is_deleted": false,\n            "asset_tags": { "$exists": true, "$ne": [] },\n            "tags": { "$exists": true, "$ne": [] }\n          }\n        }\n      },\n      {\n        "comment": "STEP 2: Project tag information and counts.",\n        "stage": {\n          "$project": {\n            "_id": 0,\n            "team_id": 1,\n            "name": 1,\n            "module_id": 1,\n            "module_name": 1,\n            "asset_tags": 1,\n            "tags": 1,\n            "asset_tag_count": { "$size": "$asset_tags" },\n            "tag_count": { "$size": "$tags" },\n            "total_tags": { "$add": [{ "$size": "$asset_tags" }, { "$size": "$tags" }] }\n          }\n        }\n      },\n      {\n        "comment": "STEP 3: Sort by total tag count.",\n        "stage": {\n          "$sort": { "total_tags": -1 }\n        }\n      }\n    ]\n  },\n  {\n    "nl_query": "Show approval response time analysis for teams in organization {{organization_id}} by approval sequence",\n    "description": "Analyze how long each approval sequence takes to complete across different teams.",\n    "collection": "approval",\n    "pipeline": [\n      {\n        "comment": "STEP 1: Match approval requests by organization.",\n        "stage": {\n          "$match": {\n            "organization": "{{organization_id}}",\n            "is_deleted": false,\n            "is_approval_completed": true\n          }\n        }\n      },\n      {\n        "comment": "STEP 2: Unwind approval_sent_to array.",\n        "stage": {\n          "$unwind": "$approval_sent_to"\n        }\n      },\n      {\n        "comment": "STEP 3: Calculate response time for each approval.",\n        "stage": {\n          "$project": {\n            "approval_request_id": 1,\n            "approval_team_id": "$approval_team.team_id",\n            "approval_sequence": "$approval_sent_to.approval_sequence",\n            "approval_state": "$approval_sent_to.approval_state",\n            "response_time_hours": {\n              "$divide": [\n                { "$subtract": ["$approval_sent_to.approval_date", "$approval_sent_to.approval_request_date"] },\n                3600000\n              ]\n            }\n          }\n        }\n      },\n      {\n        "comment": "STEP 4: Group by team and sequence to get averages.",\n        "stage": {\n          "$group": {\n            "_id": {\n              "team_id": "$approval_team_id",\n              "sequence": "$approval_sequence"\n            },\n            "avg_response_time": { "$avg": "$response_time_hours" },\n            "min_response_time": { "$min": "$response_time_hours" },\n            "max_response_time": { "$max": "$response_time_hours" },\n            "total_approvals": { "$sum": 1 },\n            "approved_count": {\n              "$sum": { "$cond": [{ "$eq": ["$approval_state", 1] }, 1, 0] }\n            }\n          }\n        }\n      },\n      {\n        "comment": "STEP 5: Lookup team information.",\n        "stage": {\n          "$lookup": {\n            "from": "team",\n            "localField": "_id.team_id",\n            "foreignField": "team_id",\n            "as": "team_info"\n          }\n        }\n      },\n      {\n        "comment": "STEP 6: Unwind and format results.",\n        "stage": {\n          "$unwind": "$team_info"\n        }\n      },\n      {\n        "comment": "STEP 7: Project final results.",\n        "stage": {\n          "$project": {\n            "_id": 0,\n            "team_id": "$_id.team_id",\n            "team_name": "$team_info.name",\n            "module_id": "$team_info.module_id",\n            "approval_sequence": "$_id.sequence",\n            "avg_response_time_hours": { "$round": ["$avg_response_time", 2] },\n            "min_response_time_hours": { "$round": ["$min_response_time", 2] },\n            "max_response_time_hours": { "$round": ["$max_response_time", 2] },\n            "total_approvals": 1,\n            "approval_rate": {\n              "$multiply": [\n                { "$divide": ["$approved_count", "$total_approvals"] },\n                100\n              ]\n            }\n          }\n        }\n      }\n    ]\n  },\n  {\n    "nl_query": "Find teams in organization {{organization_id}} with events_thres_id configured and their threshold distribution",\n    "description": "Analyze teams with event threshold monitoring and understand threshold usage patterns.",\n    "collection": "team",\n    "pipeline": [\n      {\n        "comment": "STEP 1: Match teams by organization with event thresholds.",\n        "stage": {\n          "$match": {\n            "organization": "{{organization_id}}",\n            "is_deleted": false,\n            "events_thres_id": { "$exists": true, "$ne": [] }\n          }\n        }\n      },\n      {\n        "comment": "STEP 2: Calculate threshold statistics.",\n        "stage": {\n          "$project": {\n            "team_id": 1,\n            "name": 1,\n            "module_id": 1,\n            "module_name": 1,\n            "events_thres_id": 1,\n            "threshold_count": { "$size": "$events_thres_id" },\n            "has_business_profile": { "$ne": ["$business_hr_profile", null] }\n          }\n        }\n      },\n      {\n        "comment": "STEP 3: Group by module to analyze distribution.",\n        "stage": {\n          "$group": {\n            "_id": "$module_id",\n            "module_name": { "$first": "$module_name" },\n            "teams_with_thresholds": { "$sum": 1 },\n            "total_thresholds": { "$sum": "$threshold_count" },\n            "avg_thresholds_per_team": { "$avg": "$threshold_count" },\n            "teams": {\n              "$push": {\n                "team_id": "$team_id",\n                "name": "$name",\n                "threshold_count": "$threshold_count",\n                "has_business_profile": "$has_business_profile"\n              }\n            }\n          }\n        }\n      },\n      {\n        "comment": "STEP 4: Sort by module_id.",\n        "stage": {\n          "$sort": { "_id": 1 }\n        }\n      }\n    ]\n  },\n  {\n    "nl_query": "Show teams in organization {{organization_id}} with rule-based assignment and their configuration details",\n    "description": "Identify teams using automated rule-based assignment and analyze their rule configurations.",\n    "collection": "team",\n    "pipeline": [\n      {\n        "comment": "STEP 1: Match teams by organization with rule assignment.",\n        "stage": {\n          "$match": {\n            "organization": "{{organization_id}}",\n            "is_deleted": false,\n            "config.is_rule_assigned": true\n          }\n        }\n      },\n      {\n        "comment": "STEP 2: Project rule configuration details.",\n        "stage": {\n          "$project": {\n            "_id": 0,\n            "team_id": 1,\n            "name": 1,\n            "module_id": 1,\n            "module_name": 1,\n            "group_type": 1,\n            "rule_config": "$config",\n            "staff_selection_type": 1,\n            "is_approval_sequence": 1,\n            "response_required": 1\n          }\n        }\n      },\n      {\n        "comment": "STEP 3: Group by rule_type to analyze patterns.",\n        "stage": {\n          "$group": {\n            "_id": "$rule_config.rule_type",\n            "team_count": { "$sum": 1 },\n            "teams": {\n              "$push": {\n                "team_id": "$team_id",\n                "name": "$name",\n                "module_id": "$module_id",\n                "rule_id": "$rule_config.rule_id",\n                "staff_selection_type": "$staff_selection_type"\n              }\n            }\n          }\n        }\n      }\n    ]\n  },\n  {\n    "nl_query": "Find teams in organization {{organization_id}} with mismatched approval configuration (sequential flag vs actual sequence data)",\n    "description": "Identify teams where is_approval_sequence flag doesn\'t match the actual sequence configuration.",\n    "collection": "team",\n    "pipeline": [\n      {\n        "comment": "STEP 1: Match teams by organization.",\n        "stage": {\n          "$match": {\n            "organization": "{{organization_id}}",\n            "is_deleted": false\n          }\n        }\n      },\n      {\n        "comment": "STEP 2: Add configuration analysis fields.",\n        "stage": {\n          "$project": {\n            "team_id": 1,\n            "name": 1,\n            "module_id": 1,\n            "is_approval_sequence": 1,\n            "has_sequence_staffs": { "$ne": ["$sequence_staffs", []] },\n            "has_level_staff": { "$ne": ["$level_staff", []] },\n            "has_staffs": { "$ne": ["$staffs", []] },\n            "sequence_count": { "$size": { "$ifNull": ["$sequence_staffs", []] } },\n            "level_count": { "$size": { "$ifNull": ["$level_staff", []] } }\n          }\n        }\n      },\n      {\n        "comment": "STEP 3: Find mismatched configurations.",\n        "stage": {\n          "$match": {\n            "$or": [\n              {\n                "$and": [\n                  { "is_approval_sequence": true },\n                  { "has_sequence_staffs": false },\n                  { "has_level_staff": false }\n                ]\n              },\n              {\n                "$and": [\n                  { "is_approval_sequence": false },\n                  { "has_sequence_staffs": true },\n                  { "has_level_staff": false }\n                ]\n              }\n            ]\n          }\n        }\n      },\n      {\n        "comment": "STEP 4: Project mismatch details.",\n        "stage": {\n          "$project": {\n            "_id": 0,\n            "team_id": 1,\n            "name": 1,\n            "module_id": 1,\n            "is_approval_sequence": 1,\n            "has_sequence_staffs": 1,\n            "has_level_staff": 1,\n            "has_staffs": 1,\n            "mismatch_type": {\n              "$cond": [\n                {\n                  "$and": [\n                    { "$eq": ["$is_approval_sequence", true] },\n                    { "$eq": ["$has_sequence_staffs", false] }\n                  ]\n                },\n                "sequential_flag_but_no_sequence",\n                "has_sequence_but_parallel_flag"\n              ]\n            }\n          }\n        }\n      }\n    ]\n  },\n  {\n    "nl_query": "Show teams in organization {{organization_id}} with notification channels configured at different approval levels",\n    "description": "Analyze notification channel distribution across approval levels in teams.",\n    "collection": "team",\n    "pipeline": [\n      {\n        "comment": "STEP 1: Match teams by organization with level_staff.",\n        "stage": {\n          "$match": {\n            "organization": "{{organization_id}}",\n            "is_deleted": false,\n            "level_staff": { "$exists": true, "$ne": [] }\n          }\n        }\n      },\n      {\n        "comment": "STEP 2: Unwind level_staff array.",\n        "stage": {\n          "$unwind": "$level_staff"\n        }\n      },\n      {\n        "comment": "STEP 3: Unwind expertGroupLevel array.",\n        "stage": {\n          "$unwind": "$level_staff.expertGroupLevel"\n        }\n      },\n      {\n        "comment": "STEP 4: Analyze notification configurations.",\n        "stage": {\n          "$project": {\n            "team_id": 1,\n            "name": 1,\n            "module_id": 1,\n            "level": "$level_staff.expertGroupLevel.level",\n            "level_id": "$level_staff.expertGroupLevel.level_id",\n            "has_email_notify": { "$ne": ["$level_staff.expertGroupLevel.notify_mail", []] },\n            "has_phone_notify": { "$ne": ["$level_staff.expertGroupLevel.notify_phone", []] },\n            "email_count": { "$size": { "$ifNull": ["$level_staff.expertGroupLevel.notify_mail", []] } },\n            "phone_count": { "$size": { "$ifNull": ["$level_staff.expertGroupLevel.notify_phone", []] } },\n            "user_count": { "$size": "$level_staff.expertGroupLevel.users" }\n          }\n        }\n      },\n      {\n        "comment": "STEP 5: Group by team to summarize notifications.",\n        "stage": {\n          "$group": {\n            "_id": "$team_id",\n            "team_name": { "$first": "$name" },\n            "module_id": { "$first": "$module_id" },\n            "total_levels": { "$sum": 1 },\n            "levels_with_email": { "$sum": { "$cond": ["$has_email_notify", 1, 0] } },\n            "levels_with_phone": { "$sum": { "$cond": ["$has_phone_notify", 1, 0] } },\n            "total_email_addresses": { "$sum": "$email_count" },\n            "total_phone_numbers": { "$sum": "$phone_count" },\n            "level_details": {\n              "$push": {\n                "level": "$level",\n                "has_email": "$has_email_notify",\n                "has_phone": "$has_phone_notify",\n                "email_count": "$email_count",\n                "phone_count": "$phone_count"\n              }\n            }\n          }\n        }\n      },\n      {\n        "comment": "STEP 6: Filter teams with notification configurations.",\n        "stage": {\n          "$match": {\n            "$or": [\n              { "levels_with_email": { "$gt": 0 } },\n              { "levels_with_phone": { "$gt": 0 } }\n            ]\n          }\n        }\n      }\n    ]\n  },\n  {\n    "nl_query": "Find teams in organization {{organization_id}} with business hour profiles and analyze their SLA coverage",\n    "description": "Identify teams with business hour configurations and analyze their SLA-related settings.",\n    "collection": "team",\n    "pipeline": [\n      {\n        "comment": "STEP 1: Match teams by organization with business hour profiles.",\n        "stage": {\n          "$match": {\n            "organization": "{{organization_id}}",\n            "is_deleted": false,\n            "business_hr_profile": { "$exists": true, "$ne": null }\n          }\n        }\n      },\n      {\n        "comment": "STEP 2: Project business hour and SLA related fields.",\n        "stage": {\n          "$project": {\n            "_id": 0,\n            "team_id": 1,\n            "name": 1,\n            "module_id": 1,\n            "module_name": 1,\n            "business_hr_profile": 1,\n            "response_required": 1,\n            "is_add_notify_required": 1,\n            "has_event_thresholds": { "$ne": ["$events_thres_id", []] },\n            "staff_selection_type": 1,\n            "is_approval_sequence": 1\n          }\n        }\n      },\n      {\n        "comment": "STEP 3: Group by business hour profile to analyze usage.",\n        "stage": {\n          "$group": {\n            "_id": "$business_hr_profile.profile_id",\n            "profile_name": { "$first": "$business_hr_profile.name" },\n            "team_count": { "$sum": 1 },\n            "response_required_count": {\n              "$sum": { "$cond": ["$response_required", 1, 0] }\n            },\n            "notification_required_count": {\n              "$sum": { "$cond": ["$is_add_notify_required", 1, 0] }\n            },\n            "teams": {\n              "$push": {\n                "team_id": "$team_id",\n                "name": "$name",\n                "module_id": "$module_id",\n                "response_required": "$response_required"\n              }\n            }\n          }\n        }\n      },\n      {\n        "comment": "STEP 4: Sort by team count to show most used profiles.",\n        "stage": {\n          "$sort": { "team_count": -1 }\n        }\n      }\n    ]\n  },\n  {\n    "nl_query": "Show teams in organization {{organization_id}} with the most complex approval structures (multiple levels and sequences)",\n    "description": "Identify teams with the most complex approval configurations combining multiple levels and sequences.",\n    "collection": "team",\n    "pipeline": [\n      {\n        "comment": "STEP 1: Match teams by organization.",\n        "stage": {\n          "$match": {\n            "organization": "{{organization_id}}",\n            "is_deleted": false\n          }\n        }\n      },\n      {\n        "comment": "STEP 2: Calculate complexity metrics.",\n        "stage": {\n          "$project": {\n            "team_id": 1,\n            "name": 1,\n            "module_id": 1,\n            "module_name": 1,\n            "is_approval_sequence": 1,\n            "sequence_count": { "$size": { "$ifNull": ["$sequence_staffs", []] } },\n            "level_staff_count": { "$size": { "$ifNull": ["$level_staff", []] } },\n            "total_approval_levels": {\n              "$reduce": {\n                "input": { "$ifNull": ["$level_staff", []] },\n                "initialValue": 0,\n                "in": { "$add": ["$$value", { "$size": "$$this.expertGroupLevel" }] }\n              }\n            },\n            "total_users": {\n              "$add": [\n                { "$size": { "$ifNull": ["$owner", []] } },\n                { "$size": { "$ifNull": ["$staffs", []] } },\n                {\n                  "$reduce": {\n                    "input": { "$ifNull": ["$sequence_staffs", []] },\n                    "initialValue": 0,\n                    "in": { "$add": ["$$value", { "$size": "$$this.users" }] }\n                  }\n                },\n                {\n                  "$reduce": {\n                    "input": { "$ifNull": ["$level_staff", []] },\n                    "initialValue": 0,\n                    "in": {\n                      "$add": [\n                        "$$value",\n                        {\n                          "$reduce": {\n                            "input": "$$this.expertGroupLevel",\n                            "initialValue": 0,\n                            "in": { "$add": ["$$value", { "$size": "$$this.users" }] }\n                          }\n                        }\n                      ]\n                    }\n                  }\n                }\n              ]\n            }\n          }\n        }\n      },\n      {\n        "comment": "STEP 3: Calculate complexity score.",\n        "stage": {\n          "$project": {\n            "team_id": 1,\n            "name": 1,\n            "module_id": 1,\n            "module_name": 1,\n            "is_approval_sequence": 1,\n            "sequence_count": 1,\n            "level_staff_count": 1,\n            "total_approval_levels": 1,\n            "total_users": 1,\n            "complexity_score": {\n              "$add": [\n                { "$multiply": ["$sequence_count", 2] },\n                { "$multiply": ["$level_staff_count", 3] },\n                { "$multiply": ["$total_approval_levels", 1] },\n                { "$multiply": ["$total_users", 0.1] }\n              ]\n            }\n          }\n        }\n      },\n      {\n        "comment": "STEP 4: Sort by complexity score descending.",\n        "stage": {\n          "$sort": { "complexity_score": -1 }\n        }\n      },\n      {\n        "comment": "STEP 5: Limit to top 15 most complex teams.",\n        "stage": {\n          "$limit": 15\n        }\n      }\n    ]\n  },\n  {\n    "nl_query": "Find teams in organization {{organization_id}} with duplicate users across different approval levels",\n    "description": "Identify teams where the same user appears in multiple approval levels, which might indicate configuration issues.",\n    "collection": "team",\n    "pipeline": [\n      {\n        "comment": "STEP 1: Match teams by organization with level_staff.",\n        "stage": {\n          "$match": {\n            "organization": "{{organization_id}}",\n            "is_deleted": false,\n            "level_staff": { "$exists": true, "$ne": [] }\n          }\n        }\n      },\n      {\n        "comment": "STEP 2: Unwind level_staff array.",\n        "stage": {\n          "$unwind": "$level_staff"\n        }\n      },\n      {\n        "comment": "STEP 3: Unwind expertGroupLevel array.",\n        "stage": {\n          "$unwind": "$level_staff.expertGroupLevel"\n        }\n      },\n      {\n        "comment": "STEP 4: Unwind users array.",\n        "stage": {\n          "$unwind": "$level_staff.expertGroupLevel.users"\n        }\n      },\n      {\n        "comment": "STEP 5: Group by team and user to count appearances.",\n        "stage": {\n          "$group": {\n            "_id": {\n              "team_id": "$team_id",\n              "user_id": "$level_staff.expertGroupLevel.users.profile_id"\n            },\n            "team_name": { "$first": "$name" },\n            "module_id": { "$first": "$module_id" },\n            "user_email": { "$first": "$level_staff.expertGroupLevel.users.email" },\n            "user_name": { "$first": "$level_staff.expertGroupLevel.users.full_name" },\n            "level_appearances": { "$sum": 1 },\n            "levels": {\n              "$push": {\n                "level": "$level_staff.expertGroupLevel.level",\n                "level_id": "$level_staff.expertGroupLevel.level_id",\n                "expertise": "$level_staff.expertise"\n              }\n            }\n          }\n        }\n      },\n      {\n        "comment": "STEP 6: Filter users appearing in multiple levels.",\n        "stage": {\n          "$match": {\n            "level_appearances": { "$gt": 1 }\n          }\n        }\n      },\n      {\n        "comment": "STEP 7: Group by team to show duplicate users.",\n        "stage": {\n          "$group": {\n            "_id": "$_id.team_id",\n            "team_name": { "$first": "$team_name" },\n            "module_id": { "$first": "$module_id" },\n            "duplicate_users": {\n              "$push": {\n                "user_id": "$_id.user_id",\n                "user_name": "$user_name",\n                "user_email": "$user_email",\n                "level_appearances": "$level_appearances",\n                "levels": "$levels"\n              }\n            },\n            "total_duplicates": { "$sum": 1 }\n          }\n        }\n      },\n      {\n        "comment": "STEP 8: Sort by total duplicates descending.",\n        "stage": {\n          "$sort": { "total_duplicates": -1 }\n        }\n      }\n    ]\n  },\n  {\n    "nl_query": "Show approval escalation patterns for teams in organization {{organization_id}} based on approval timeouts",\n    "description": "Analyze approval escalation patterns by examining approval sequences that exceed typical response times.",\n    "collection": "approval",\n    "pipeline": [\n      {\n        "comment": "STEP 1: Match approval requests by organization.",\n        "stage": {\n          "$match": {\n            "organization": "{{organization_id}}",\n            "is_deleted": false,\n            "approval_sent_to": { "$exists": true, "$ne": [] }\n          }\n        }\n      },\n      {\n        "comment": "STEP 2: Unwind approval_sent_to array.",\n        "stage": {\n          "$unwind": "$approval_sent_to"\n        }\n      },\n      {\n        "comment": "STEP 3: Calculate response time and identify timeouts.",\n        "stage": {\n          "$project": {\n            "approval_request_id": 1,\n            "approval_team_id": "$approval_team.team_id",\n            "module_id": 1,\n            "approval_sequence": "$approval_sent_to.approval_sequence",\n            "approval_state": "$approval_sent_to.approval_state",\n            "approved_by": "$approval_sent_to.approved_by",\n            "request_date": "$approval_sent_to.approval_request_date",\n            "approval_date": "$approval_sent_to.approval_date",\n            "response_time_hours": {\n              "$divide": [\n                { "$subtract": ["$approval_sent_to.approval_date", "$approval_sent_to.approval_request_date"] },\n                3600000\n              ]\n            },\n            "is_timeout": {\n              "$cond": [\n                { "$gt": [{ "$subtract": ["$approval_sent_to.approval_date", "$approval_sent_to.approval_request_date"] }, 172800000] },\n                true,\n                false\n              ]\n            }\n          }\n        }\n      },\n      {\n        "comment": "STEP 4: Group by team to analyze timeout patterns.",\n        "stage": {\n          "$group": {\n            "_id": "$approval_team_id",\n            "total_approvals": { "$sum": 1 },\n            "timeout_count": { "$sum": { "$cond": ["$is_timeout", 1, 0] } },\n            "avg_response_time": { "$avg": "$response_time_hours" },\n            "max_response_time": { "$max": "$response_time_hours" },\n            "sequence_timeouts": {\n              "$push": {\n                "$cond": [\n                  "$is_timeout",\n                  {\n                    "sequence": "$approval_sequence",\n                    "response_time": "$response_time_hours",\n                    "approval_state": "$approval_state"\n                  },\n                  "$$REMOVE"\n                ]\n              }\n            }\n          }\n        }\n      },\n      {\n        "comment": "STEP 5: Calculate timeout percentage.",\n        "stage": {\n          "$project": {\n            "_id": 1,\n            "total_approvals": 1,\n            "timeout_count": 1,\n            "timeout_percentage": {\n              "$multiply": [\n                { "$divide": ["$timeout_count", "$total_approvals"] },\n                100\n              ]\n            },\n            "avg_response_time": { "$round": ["$avg_response_time", 2] },\n            "max_response_time": { "$round": ["$max_response_time", 2] },\n            "sequence_timeouts": 1\n          }\n        }\n      },\n      {\n        "comment": "STEP 6: Lookup team information.",\n        "stage": {\n          "$lookup": {\n            "from": "team",\n            "localField": "_id",\n            "foreignField": "team_id",\n            "as": "team_info"\n          }\n        }\n      },\n      {\n        "comment": "STEP 7: Filter teams with timeout issues.",\n        "stage": {\n          "$match": {\n            "timeout_percentage": { "$gt": 10 }\n          }\n        }\n      },\n      {\n        "comment": "STEP 8: Sort by timeout percentage descending.",\n        "stage": {\n          "$sort": { "timeout_percentage": -1 }\n        }\n      }\n    ]\n  }\n]\n'})})]})}function c(n={}){const{wrapper:e}={...(0,o.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(d,{...n})}):d(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>s,x:()=>r});var a=t(6540);const i={},o=a.createContext(i);function s(n){const e=a.useContext(o);return a.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function r(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:s(n.components),a.createElement(o.Provider,{value:e},n.children)}}}]);